// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LostSeriesProtocol.proto

#ifndef PROTOBUF_LostSeriesProtocol_2eproto__INCLUDED
#define PROTOBUF_LostSeriesProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

class Message;
class SeriesRequest;
class SeriesResponse;
class SeriesResponse_TVShow;
class ArtworkRequest;
class ArtworkResponse;

// ===================================================================

class Message : public ::google_public::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LS.SeriesRequest seriesRequest = 1000;
  inline bool has_seriesrequest() const;
  inline void clear_seriesrequest();
  static const int kSeriesRequestFieldNumber = 1000;
  inline const ::LS::SeriesRequest& seriesrequest() const;
  inline ::LS::SeriesRequest* mutable_seriesrequest();
  inline ::LS::SeriesRequest* release_seriesrequest();
  inline void set_allocated_seriesrequest(::LS::SeriesRequest* seriesrequest);

  // optional .LS.ArtworkRequest artworkRequest = 1001;
  inline bool has_artworkrequest() const;
  inline void clear_artworkrequest();
  static const int kArtworkRequestFieldNumber = 1001;
  inline const ::LS::ArtworkRequest& artworkrequest() const;
  inline ::LS::ArtworkRequest* mutable_artworkrequest();
  inline ::LS::ArtworkRequest* release_artworkrequest();
  inline void set_allocated_artworkrequest(::LS::ArtworkRequest* artworkrequest);

  // optional .LS.SeriesResponse seriesResponse = 2000;
  inline bool has_seriesresponse() const;
  inline void clear_seriesresponse();
  static const int kSeriesResponseFieldNumber = 2000;
  inline const ::LS::SeriesResponse& seriesresponse() const;
  inline ::LS::SeriesResponse* mutable_seriesresponse();
  inline ::LS::SeriesResponse* release_seriesresponse();
  inline void set_allocated_seriesresponse(::LS::SeriesResponse* seriesresponse);

  // optional .LS.ArtworkResponse artworkResponse = 2001;
  inline bool has_artworkresponse() const;
  inline void clear_artworkresponse();
  static const int kArtworkResponseFieldNumber = 2001;
  inline const ::LS::ArtworkResponse& artworkresponse() const;
  inline ::LS::ArtworkResponse* mutable_artworkresponse();
  inline ::LS::ArtworkResponse* release_artworkresponse();
  inline void set_allocated_artworkresponse(::LS::ArtworkResponse* artworkresponse);

  // @@protoc_insertion_point(class_scope:LS.Message)
 private:
  inline void set_has_seriesrequest();
  inline void clear_has_seriesrequest();
  inline void set_has_artworkrequest();
  inline void clear_has_artworkrequest();
  inline void set_has_seriesresponse();
  inline void clear_has_seriesresponse();
  inline void set_has_artworkresponse();
  inline void clear_has_artworkresponse();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::LS::SeriesRequest* seriesrequest_;
  ::LS::ArtworkRequest* artworkrequest_;
  ::LS::SeriesResponse* seriesresponse_;
  ::LS::ArtworkResponse* artworkresponse_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class SeriesRequest : public ::google_public::protobuf::Message {
 public:
  SeriesRequest();
  virtual ~SeriesRequest();

  SeriesRequest(const SeriesRequest& from);

  inline SeriesRequest& operator=(const SeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesRequest& default_instance();

  void Swap(SeriesRequest* other);

  // implements Message ----------------------------------------------

  SeriesRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesRequest& from);
  void MergeFrom(const SeriesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LS.SeriesRequest)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class SeriesResponse_TVShow : public ::google_public::protobuf::Message {
 public:
  SeriesResponse_TVShow();
  virtual ~SeriesResponse_TVShow();

  SeriesResponse_TVShow(const SeriesResponse_TVShow& from);

  inline SeriesResponse_TVShow& operator=(const SeriesResponse_TVShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesResponse_TVShow& default_instance();

  void Swap(SeriesResponse_TVShow* other);

  // implements Message ----------------------------------------------

  SeriesResponse_TVShow* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesResponse_TVShow& from);
  void MergeFrom(const SeriesResponse_TVShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string originalTitle = 2;
  inline bool has_originaltitle() const;
  inline void clear_originaltitle();
  static const int kOriginalTitleFieldNumber = 2;
  inline const ::std::string& originaltitle() const;
  inline void set_originaltitle(const ::std::string& value);
  inline void set_originaltitle(const char* value);
  inline void set_originaltitle(const char* value, size_t size);
  inline ::std::string* mutable_originaltitle();
  inline ::std::string* release_originaltitle();
  inline void set_allocated_originaltitle(::std::string* originaltitle);

  // required int32 seasonNumber = 3;
  inline bool has_seasonnumber() const;
  inline void clear_seasonnumber();
  static const int kSeasonNumberFieldNumber = 3;
  inline ::google_public::protobuf::int32 seasonnumber() const;
  inline void set_seasonnumber(::google_public::protobuf::int32 value);

  // required string snapshot = 4;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 4;
  inline const ::std::string& snapshot() const;
  inline void set_snapshot(const ::std::string& value);
  inline void set_snapshot(const char* value);
  inline void set_snapshot(const char* value, size_t size);
  inline ::std::string* mutable_snapshot();
  inline ::std::string* release_snapshot();
  inline void set_allocated_snapshot(::std::string* snapshot);

  // @@protoc_insertion_point(class_scope:LS.SeriesResponse.TVShow)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_originaltitle();
  inline void clear_has_originaltitle();
  inline void set_has_seasonnumber();
  inline void clear_has_seasonnumber();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* originaltitle_;
  ::std::string* snapshot_;
  ::google_public::protobuf::int32 seasonnumber_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesResponse_TVShow* default_instance_;
};
// -------------------------------------------------------------------

class SeriesResponse : public ::google_public::protobuf::Message {
 public:
  SeriesResponse();
  virtual ~SeriesResponse();

  SeriesResponse(const SeriesResponse& from);

  inline SeriesResponse& operator=(const SeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesResponse& default_instance();

  void Swap(SeriesResponse* other);

  // implements Message ----------------------------------------------

  SeriesResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesResponse& from);
  void MergeFrom(const SeriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SeriesResponse_TVShow TVShow;

  // accessors -------------------------------------------------------

  // repeated .LS.SeriesResponse.TVShow shows = 1;
  inline int shows_size() const;
  inline void clear_shows();
  static const int kShowsFieldNumber = 1;
  inline const ::LS::SeriesResponse_TVShow& shows(int index) const;
  inline ::LS::SeriesResponse_TVShow* mutable_shows(int index);
  inline ::LS::SeriesResponse_TVShow* add_shows();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >&
      shows() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >*
      mutable_shows();

  // @@protoc_insertion_point(class_scope:LS.SeriesResponse)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow > shows_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class ArtworkRequest : public ::google_public::protobuf::Message {
 public:
  ArtworkRequest();
  virtual ~ArtworkRequest();

  ArtworkRequest(const ArtworkRequest& from);

  inline ArtworkRequest& operator=(const ArtworkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ArtworkRequest& default_instance();

  void Swap(ArtworkRequest* other);

  // implements Message ----------------------------------------------

  ArtworkRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ArtworkRequest& from);
  void MergeFrom(const ArtworkRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshot = 1;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  inline const ::std::string& snapshot() const;
  inline void set_snapshot(const ::std::string& value);
  inline void set_snapshot(const char* value);
  inline void set_snapshot(const char* value, size_t size);
  inline ::std::string* mutable_snapshot();
  inline ::std::string* release_snapshot();
  inline void set_allocated_snapshot(::std::string* snapshot);

  // required string originalTitle = 2;
  inline bool has_originaltitle() const;
  inline void clear_originaltitle();
  static const int kOriginalTitleFieldNumber = 2;
  inline const ::std::string& originaltitle() const;
  inline void set_originaltitle(const ::std::string& value);
  inline void set_originaltitle(const char* value);
  inline void set_originaltitle(const char* value, size_t size);
  inline ::std::string* mutable_originaltitle();
  inline ::std::string* release_originaltitle();
  inline void set_allocated_originaltitle(::std::string* originaltitle);

  // @@protoc_insertion_point(class_scope:LS.ArtworkRequest)
 private:
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_originaltitle();
  inline void clear_has_originaltitle();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshot_;
  ::std::string* originaltitle_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static ArtworkRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArtworkResponse : public ::google_public::protobuf::Message {
 public:
  ArtworkResponse();
  virtual ~ArtworkResponse();

  ArtworkResponse(const ArtworkResponse& from);

  inline ArtworkResponse& operator=(const ArtworkResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ArtworkResponse& default_instance();

  void Swap(ArtworkResponse* other);

  // implements Message ----------------------------------------------

  ArtworkResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ArtworkResponse& from);
  void MergeFrom(const ArtworkResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshot = 1;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  inline const ::std::string& snapshot() const;
  inline void set_snapshot(const ::std::string& value);
  inline void set_snapshot(const char* value);
  inline void set_snapshot(const char* value, size_t size);
  inline ::std::string* mutable_snapshot();
  inline ::std::string* release_snapshot();
  inline void set_allocated_snapshot(::std::string* snapshot);

  // required string originalTitle = 2;
  inline bool has_originaltitle() const;
  inline void clear_originaltitle();
  static const int kOriginalTitleFieldNumber = 2;
  inline const ::std::string& originaltitle() const;
  inline void set_originaltitle(const ::std::string& value);
  inline void set_originaltitle(const char* value);
  inline void set_originaltitle(const char* value, size_t size);
  inline ::std::string* mutable_originaltitle();
  inline ::std::string* release_originaltitle();
  inline void set_allocated_originaltitle(::std::string* originaltitle);

  // required bytes artwork = 3;
  inline bool has_artwork() const;
  inline void clear_artwork();
  static const int kArtworkFieldNumber = 3;
  inline const ::std::string& artwork() const;
  inline void set_artwork(const ::std::string& value);
  inline void set_artwork(const char* value);
  inline void set_artwork(const void* value, size_t size);
  inline ::std::string* mutable_artwork();
  inline ::std::string* release_artwork();
  inline void set_allocated_artwork(::std::string* artwork);

  // @@protoc_insertion_point(class_scope:LS.ArtworkResponse)
 private:
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_originaltitle();
  inline void clear_has_originaltitle();
  inline void set_has_artwork();
  inline void clear_has_artwork();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshot_;
  ::std::string* originaltitle_;
  ::std::string* artwork_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static ArtworkResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// optional .LS.SeriesRequest seriesRequest = 1000;
inline bool Message::has_seriesrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_seriesrequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_seriesrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_seriesrequest() {
  if (seriesrequest_ != NULL) seriesrequest_->::LS::SeriesRequest::Clear();
  clear_has_seriesrequest();
}
inline const ::LS::SeriesRequest& Message::seriesrequest() const {
  return seriesrequest_ != NULL ? *seriesrequest_ : *default_instance_->seriesrequest_;
}
inline ::LS::SeriesRequest* Message::mutable_seriesrequest() {
  set_has_seriesrequest();
  if (seriesrequest_ == NULL) seriesrequest_ = new ::LS::SeriesRequest;
  return seriesrequest_;
}
inline ::LS::SeriesRequest* Message::release_seriesrequest() {
  clear_has_seriesrequest();
  ::LS::SeriesRequest* temp = seriesrequest_;
  seriesrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_seriesrequest(::LS::SeriesRequest* seriesrequest) {
  delete seriesrequest_;
  seriesrequest_ = seriesrequest;
  if (seriesrequest) {
    set_has_seriesrequest();
  } else {
    clear_has_seriesrequest();
  }
}

// optional .LS.ArtworkRequest artworkRequest = 1001;
inline bool Message::has_artworkrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_artworkrequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_artworkrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_artworkrequest() {
  if (artworkrequest_ != NULL) artworkrequest_->::LS::ArtworkRequest::Clear();
  clear_has_artworkrequest();
}
inline const ::LS::ArtworkRequest& Message::artworkrequest() const {
  return artworkrequest_ != NULL ? *artworkrequest_ : *default_instance_->artworkrequest_;
}
inline ::LS::ArtworkRequest* Message::mutable_artworkrequest() {
  set_has_artworkrequest();
  if (artworkrequest_ == NULL) artworkrequest_ = new ::LS::ArtworkRequest;
  return artworkrequest_;
}
inline ::LS::ArtworkRequest* Message::release_artworkrequest() {
  clear_has_artworkrequest();
  ::LS::ArtworkRequest* temp = artworkrequest_;
  artworkrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_artworkrequest(::LS::ArtworkRequest* artworkrequest) {
  delete artworkrequest_;
  artworkrequest_ = artworkrequest;
  if (artworkrequest) {
    set_has_artworkrequest();
  } else {
    clear_has_artworkrequest();
  }
}

// optional .LS.SeriesResponse seriesResponse = 2000;
inline bool Message::has_seriesresponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_seriesresponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_seriesresponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_seriesresponse() {
  if (seriesresponse_ != NULL) seriesresponse_->::LS::SeriesResponse::Clear();
  clear_has_seriesresponse();
}
inline const ::LS::SeriesResponse& Message::seriesresponse() const {
  return seriesresponse_ != NULL ? *seriesresponse_ : *default_instance_->seriesresponse_;
}
inline ::LS::SeriesResponse* Message::mutable_seriesresponse() {
  set_has_seriesresponse();
  if (seriesresponse_ == NULL) seriesresponse_ = new ::LS::SeriesResponse;
  return seriesresponse_;
}
inline ::LS::SeriesResponse* Message::release_seriesresponse() {
  clear_has_seriesresponse();
  ::LS::SeriesResponse* temp = seriesresponse_;
  seriesresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_seriesresponse(::LS::SeriesResponse* seriesresponse) {
  delete seriesresponse_;
  seriesresponse_ = seriesresponse;
  if (seriesresponse) {
    set_has_seriesresponse();
  } else {
    clear_has_seriesresponse();
  }
}

// optional .LS.ArtworkResponse artworkResponse = 2001;
inline bool Message::has_artworkresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_artworkresponse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_artworkresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_artworkresponse() {
  if (artworkresponse_ != NULL) artworkresponse_->::LS::ArtworkResponse::Clear();
  clear_has_artworkresponse();
}
inline const ::LS::ArtworkResponse& Message::artworkresponse() const {
  return artworkresponse_ != NULL ? *artworkresponse_ : *default_instance_->artworkresponse_;
}
inline ::LS::ArtworkResponse* Message::mutable_artworkresponse() {
  set_has_artworkresponse();
  if (artworkresponse_ == NULL) artworkresponse_ = new ::LS::ArtworkResponse;
  return artworkresponse_;
}
inline ::LS::ArtworkResponse* Message::release_artworkresponse() {
  clear_has_artworkresponse();
  ::LS::ArtworkResponse* temp = artworkresponse_;
  artworkresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_artworkresponse(::LS::ArtworkResponse* artworkresponse) {
  delete artworkresponse_;
  artworkresponse_ = artworkresponse;
  if (artworkresponse) {
    set_has_artworkresponse();
  } else {
    clear_has_artworkresponse();
  }
}

// -------------------------------------------------------------------

// SeriesRequest

// -------------------------------------------------------------------

// SeriesResponse_TVShow

// required string title = 1;
inline bool SeriesResponse_TVShow::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeriesResponse_TVShow::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeriesResponse_TVShow::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeriesResponse_TVShow::clear_title() {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SeriesResponse_TVShow::title() const {
  return *title_;
}
inline void SeriesResponse_TVShow::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SeriesResponse_TVShow::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SeriesResponse_TVShow::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_title() {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SeriesResponse_TVShow::release_title() {
  clear_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_title(::std::string* title) {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string originalTitle = 2;
inline bool SeriesResponse_TVShow::has_originaltitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeriesResponse_TVShow::set_has_originaltitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeriesResponse_TVShow::clear_has_originaltitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeriesResponse_TVShow::clear_originaltitle() {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_->clear();
  }
  clear_has_originaltitle();
}
inline const ::std::string& SeriesResponse_TVShow::originaltitle() const {
  return *originaltitle_;
}
inline void SeriesResponse_TVShow::set_originaltitle(const ::std::string& value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void SeriesResponse_TVShow::set_originaltitle(const char* value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void SeriesResponse_TVShow::set_originaltitle(const char* value, size_t size) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_originaltitle() {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  return originaltitle_;
}
inline ::std::string* SeriesResponse_TVShow::release_originaltitle() {
  clear_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originaltitle_;
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_originaltitle(::std::string* originaltitle) {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (originaltitle) {
    set_has_originaltitle();
    originaltitle_ = originaltitle;
  } else {
    clear_has_originaltitle();
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int32 seasonNumber = 3;
inline bool SeriesResponse_TVShow::has_seasonnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeriesResponse_TVShow::set_has_seasonnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeriesResponse_TVShow::clear_has_seasonnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeriesResponse_TVShow::clear_seasonnumber() {
  seasonnumber_ = 0;
  clear_has_seasonnumber();
}
inline ::google_public::protobuf::int32 SeriesResponse_TVShow::seasonnumber() const {
  return seasonnumber_;
}
inline void SeriesResponse_TVShow::set_seasonnumber(::google_public::protobuf::int32 value) {
  set_has_seasonnumber();
  seasonnumber_ = value;
}

// required string snapshot = 4;
inline bool SeriesResponse_TVShow::has_snapshot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeriesResponse_TVShow::set_has_snapshot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeriesResponse_TVShow::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeriesResponse_TVShow::clear_snapshot() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    snapshot_->clear();
  }
  clear_has_snapshot();
}
inline const ::std::string& SeriesResponse_TVShow::snapshot() const {
  return *snapshot_;
}
inline void SeriesResponse_TVShow::set_snapshot(const ::std::string& value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void SeriesResponse_TVShow::set_snapshot(const char* value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void SeriesResponse_TVShow::set_snapshot(const char* value, size_t size) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  return snapshot_;
}
inline ::std::string* SeriesResponse_TVShow::release_snapshot() {
  clear_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_;
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (snapshot) {
    set_has_snapshot();
    snapshot_ = snapshot;
  } else {
    clear_has_snapshot();
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SeriesResponse

// repeated .LS.SeriesResponse.TVShow shows = 1;
inline int SeriesResponse::shows_size() const {
  return shows_.size();
}
inline void SeriesResponse::clear_shows() {
  shows_.Clear();
}
inline const ::LS::SeriesResponse_TVShow& SeriesResponse::shows(int index) const {
  return shows_.Get(index);
}
inline ::LS::SeriesResponse_TVShow* SeriesResponse::mutable_shows(int index) {
  return shows_.Mutable(index);
}
inline ::LS::SeriesResponse_TVShow* SeriesResponse::add_shows() {
  return shows_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >&
SeriesResponse::shows() const {
  return shows_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >*
SeriesResponse::mutable_shows() {
  return &shows_;
}

// -------------------------------------------------------------------

// ArtworkRequest

// required string snapshot = 1;
inline bool ArtworkRequest::has_snapshot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArtworkRequest::set_has_snapshot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArtworkRequest::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArtworkRequest::clear_snapshot() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    snapshot_->clear();
  }
  clear_has_snapshot();
}
inline const ::std::string& ArtworkRequest::snapshot() const {
  return *snapshot_;
}
inline void ArtworkRequest::set_snapshot(const ::std::string& value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void ArtworkRequest::set_snapshot(const char* value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void ArtworkRequest::set_snapshot(const char* value, size_t size) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkRequest::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  return snapshot_;
}
inline ::std::string* ArtworkRequest::release_snapshot() {
  clear_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_;
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (snapshot) {
    set_has_snapshot();
    snapshot_ = snapshot;
  } else {
    clear_has_snapshot();
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string originalTitle = 2;
inline bool ArtworkRequest::has_originaltitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArtworkRequest::set_has_originaltitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArtworkRequest::clear_has_originaltitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArtworkRequest::clear_originaltitle() {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_->clear();
  }
  clear_has_originaltitle();
}
inline const ::std::string& ArtworkRequest::originaltitle() const {
  return *originaltitle_;
}
inline void ArtworkRequest::set_originaltitle(const ::std::string& value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void ArtworkRequest::set_originaltitle(const char* value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void ArtworkRequest::set_originaltitle(const char* value, size_t size) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkRequest::mutable_originaltitle() {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  return originaltitle_;
}
inline ::std::string* ArtworkRequest::release_originaltitle() {
  clear_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originaltitle_;
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkRequest::set_allocated_originaltitle(::std::string* originaltitle) {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (originaltitle) {
    set_has_originaltitle();
    originaltitle_ = originaltitle;
  } else {
    clear_has_originaltitle();
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ArtworkResponse

// required string snapshot = 1;
inline bool ArtworkResponse::has_snapshot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArtworkResponse::set_has_snapshot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArtworkResponse::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArtworkResponse::clear_snapshot() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    snapshot_->clear();
  }
  clear_has_snapshot();
}
inline const ::std::string& ArtworkResponse::snapshot() const {
  return *snapshot_;
}
inline void ArtworkResponse::set_snapshot(const ::std::string& value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void ArtworkResponse::set_snapshot(const char* value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void ArtworkResponse::set_snapshot(const char* value, size_t size) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkResponse::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  return snapshot_;
}
inline ::std::string* ArtworkResponse::release_snapshot() {
  clear_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_;
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkResponse::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (snapshot) {
    set_has_snapshot();
    snapshot_ = snapshot;
  } else {
    clear_has_snapshot();
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string originalTitle = 2;
inline bool ArtworkResponse::has_originaltitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArtworkResponse::set_has_originaltitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArtworkResponse::clear_has_originaltitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArtworkResponse::clear_originaltitle() {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_->clear();
  }
  clear_has_originaltitle();
}
inline const ::std::string& ArtworkResponse::originaltitle() const {
  return *originaltitle_;
}
inline void ArtworkResponse::set_originaltitle(const ::std::string& value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void ArtworkResponse::set_originaltitle(const char* value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void ArtworkResponse::set_originaltitle(const char* value, size_t size) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkResponse::mutable_originaltitle() {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  return originaltitle_;
}
inline ::std::string* ArtworkResponse::release_originaltitle() {
  clear_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originaltitle_;
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkResponse::set_allocated_originaltitle(::std::string* originaltitle) {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (originaltitle) {
    set_has_originaltitle();
    originaltitle_ = originaltitle;
  } else {
    clear_has_originaltitle();
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required bytes artwork = 3;
inline bool ArtworkResponse::has_artwork() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArtworkResponse::set_has_artwork() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArtworkResponse::clear_has_artwork() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArtworkResponse::clear_artwork() {
  if (artwork_ != &::google_public::protobuf::internal::kEmptyString) {
    artwork_->clear();
  }
  clear_has_artwork();
}
inline const ::std::string& ArtworkResponse::artwork() const {
  return *artwork_;
}
inline void ArtworkResponse::set_artwork(const ::std::string& value) {
  set_has_artwork();
  if (artwork_ == &::google_public::protobuf::internal::kEmptyString) {
    artwork_ = new ::std::string;
  }
  artwork_->assign(value);
}
inline void ArtworkResponse::set_artwork(const char* value) {
  set_has_artwork();
  if (artwork_ == &::google_public::protobuf::internal::kEmptyString) {
    artwork_ = new ::std::string;
  }
  artwork_->assign(value);
}
inline void ArtworkResponse::set_artwork(const void* value, size_t size) {
  set_has_artwork();
  if (artwork_ == &::google_public::protobuf::internal::kEmptyString) {
    artwork_ = new ::std::string;
  }
  artwork_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkResponse::mutable_artwork() {
  set_has_artwork();
  if (artwork_ == &::google_public::protobuf::internal::kEmptyString) {
    artwork_ = new ::std::string;
  }
  return artwork_;
}
inline ::std::string* ArtworkResponse::release_artwork() {
  clear_has_artwork();
  if (artwork_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = artwork_;
    artwork_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkResponse::set_allocated_artwork(::std::string* artwork) {
  if (artwork_ != &::google_public::protobuf::internal::kEmptyString) {
    delete artwork_;
  }
  if (artwork) {
    set_has_artwork();
    artwork_ = artwork;
  } else {
    clear_has_artwork();
    artwork_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LS

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LostSeriesProtocol_2eproto__INCLUDED
