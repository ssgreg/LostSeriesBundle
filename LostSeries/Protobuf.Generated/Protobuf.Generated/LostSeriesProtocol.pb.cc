// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LostSeriesProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LostSeriesProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LS {

namespace {

const ::google_public::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesResponse_TVShow_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesResponse_TVShow_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ArtworkRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ArtworkRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ArtworkResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ArtworkResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LostSeriesProtocol_2eproto() {
  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LostSeriesProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, seriesrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, artworkrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, seriesresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, artworkresponse_),
  };
  Message_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  SeriesRequest_descriptor_ = file->message_type(1);
  static const int SeriesRequest_offsets_[1] = {
  };
  SeriesRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesRequest_descriptor_,
      SeriesRequest::default_instance_,
      SeriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesRequest));
  SeriesResponse_descriptor_ = file->message_type(2);
  static const int SeriesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse, shows_),
  };
  SeriesResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesResponse_descriptor_,
      SeriesResponse::default_instance_,
      SeriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesResponse));
  SeriesResponse_TVShow_descriptor_ = SeriesResponse_descriptor_->nested_type(0);
  static const int SeriesResponse_TVShow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, originaltitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, seasonnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, snapshot_),
  };
  SeriesResponse_TVShow_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesResponse_TVShow_descriptor_,
      SeriesResponse_TVShow::default_instance_,
      SeriesResponse_TVShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesResponse_TVShow));
  ArtworkRequest_descriptor_ = file->message_type(3);
  static const int ArtworkRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, originaltitle_),
  };
  ArtworkRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ArtworkRequest_descriptor_,
      ArtworkRequest::default_instance_,
      ArtworkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtworkRequest));
  ArtworkResponse_descriptor_ = file->message_type(4);
  static const int ArtworkResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, originaltitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, artwork_),
  };
  ArtworkResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ArtworkResponse_descriptor_,
      ArtworkResponse::default_instance_,
      ArtworkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtworkResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LostSeriesProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesRequest_descriptor_, &SeriesRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesResponse_descriptor_, &SeriesResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesResponse_TVShow_descriptor_, &SeriesResponse_TVShow::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtworkRequest_descriptor_, &ArtworkRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtworkResponse_descriptor_, &ArtworkResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LostSeriesProtocol_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete SeriesRequest::default_instance_;
  delete SeriesRequest_reflection_;
  delete SeriesResponse::default_instance_;
  delete SeriesResponse_reflection_;
  delete SeriesResponse_TVShow::default_instance_;
  delete SeriesResponse_TVShow_reflection_;
  delete ArtworkRequest::default_instance_;
  delete ArtworkRequest_reflection_;
  delete ArtworkResponse::default_instance_;
  delete ArtworkResponse_reflection_;
}

void protobuf_AddDesc_LostSeriesProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030LostSeriesProtocol.proto\022\002LS\"\320\001\n\007Messa"
    "ge\022\021\n\tmessageID\030\001 \002(\003\022)\n\rseriesRequest\030\350"
    "\007 \001(\0132\021.LS.SeriesRequest\022+\n\016artworkReque"
    "st\030\351\007 \001(\0132\022.LS.ArtworkRequest\022+\n\016seriesR"
    "esponse\030\320\017 \001(\0132\022.LS.SeriesResponse\022-\n\017ar"
    "tworkResponse\030\321\017 \001(\0132\023.LS.ArtworkRespons"
    "e\"\017\n\rSeriesRequest\"\222\001\n\016SeriesResponse\022(\n"
    "\005shows\030\001 \003(\0132\031.LS.SeriesResponse.TVShow\032"
    "V\n\006TVShow\022\r\n\005title\030\001 \002(\t\022\025\n\roriginalTitl"
    "e\030\002 \002(\t\022\024\n\014seasonNumber\030\003 \002(\005\022\020\n\010snapsho"
    "t\030\004 \002(\t\"9\n\016ArtworkRequest\022\020\n\010snapshot\030\001 "
    "\002(\t\022\025\n\roriginalTitle\030\002 \002(\t\"K\n\017ArtworkRes"
    "ponse\022\020\n\010snapshot\030\001 \002(\t\022\025\n\roriginalTitle"
    "\030\002 \002(\t\022\017\n\007artwork\030\003 \002(\014", 543);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LostSeriesProtocol.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  SeriesRequest::default_instance_ = new SeriesRequest();
  SeriesResponse::default_instance_ = new SeriesResponse();
  SeriesResponse_TVShow::default_instance_ = new SeriesResponse_TVShow();
  ArtworkRequest::default_instance_ = new ArtworkRequest();
  ArtworkResponse::default_instance_ = new ArtworkResponse();
  Message::default_instance_->InitAsDefaultInstance();
  SeriesRequest::default_instance_->InitAsDefaultInstance();
  SeriesResponse::default_instance_->InitAsDefaultInstance();
  SeriesResponse_TVShow::default_instance_->InitAsDefaultInstance();
  ArtworkRequest::default_instance_->InitAsDefaultInstance();
  ArtworkResponse::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LostSeriesProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LostSeriesProtocol_2eproto {
  StaticDescriptorInitializer_LostSeriesProtocol_2eproto() {
    protobuf_AddDesc_LostSeriesProtocol_2eproto();
  }
} static_descriptor_initializer_LostSeriesProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Message::kMessageIDFieldNumber;
const int Message::kSeriesRequestFieldNumber;
const int Message::kArtworkRequestFieldNumber;
const int Message::kSeriesResponseFieldNumber;
const int Message::kArtworkResponseFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  seriesrequest_ = const_cast< ::LS::SeriesRequest*>(&::LS::SeriesRequest::default_instance());
  artworkrequest_ = const_cast< ::LS::ArtworkRequest*>(&::LS::ArtworkRequest::default_instance());
  seriesresponse_ = const_cast< ::LS::SeriesResponse*>(&::LS::SeriesResponse::default_instance());
  artworkresponse_ = const_cast< ::LS::ArtworkResponse*>(&::LS::ArtworkResponse::default_instance());
}

Message::Message(const Message& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = GOOGLE_LONGLONG(0);
  seriesrequest_ = NULL;
  artworkrequest_ = NULL;
  seriesresponse_ = NULL;
  artworkresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete seriesrequest_;
    delete artworkrequest_;
    delete seriesresponse_;
    delete artworkresponse_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messageid_ = GOOGLE_LONGLONG(0);
    if (has_seriesrequest()) {
      if (seriesrequest_ != NULL) seriesrequest_->::LS::SeriesRequest::Clear();
    }
    if (has_artworkrequest()) {
      if (artworkrequest_ != NULL) artworkrequest_->::LS::ArtworkRequest::Clear();
    }
    if (has_seriesresponse()) {
      if (seriesresponse_ != NULL) seriesresponse_->::LS::SeriesResponse::Clear();
    }
    if (has_artworkresponse()) {
      if (artworkresponse_ != NULL) artworkresponse_->::LS::ArtworkResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 messageID = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8002)) goto parse_seriesRequest;
        break;
      }

      // optional .LS.SeriesRequest seriesRequest = 1000;
      case 1000: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seriesrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_artworkRequest;
        break;
      }

      // optional .LS.ArtworkRequest artworkRequest = 1001;
      case 1001: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artworkRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artworkrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16002)) goto parse_seriesResponse;
        break;
      }

      // optional .LS.SeriesResponse seriesResponse = 2000;
      case 2000: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seriesresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16010)) goto parse_artworkResponse;
        break;
      }

      // optional .LS.ArtworkResponse artworkResponse = 2001;
      case 2001: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artworkResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artworkresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required int64 messageID = 1;
  if (has_messageid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(1, this->messageid(), output);
  }

  // optional .LS.SeriesRequest seriesRequest = 1000;
  if (has_seriesrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->seriesrequest(), output);
  }

  // optional .LS.ArtworkRequest artworkRequest = 1001;
  if (has_artworkrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->artworkrequest(), output);
  }

  // optional .LS.SeriesResponse seriesResponse = 2000;
  if (has_seriesresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2000, this->seriesresponse(), output);
  }

  // optional .LS.ArtworkResponse artworkResponse = 2001;
  if (has_artworkresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2001, this->artworkresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required int64 messageID = 1;
  if (has_messageid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->messageid(), target);
  }

  // optional .LS.SeriesRequest seriesRequest = 1000;
  if (has_seriesrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->seriesrequest(), target);
  }

  // optional .LS.ArtworkRequest artworkRequest = 1001;
  if (has_artworkrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->artworkrequest(), target);
  }

  // optional .LS.SeriesResponse seriesResponse = 2000;
  if (has_seriesresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2000, this->seriesresponse(), target);
  }

  // optional .LS.ArtworkResponse artworkResponse = 2001;
  if (has_artworkresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2001, this->artworkresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 messageID = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

    // optional .LS.SeriesRequest seriesRequest = 1000;
    if (has_seriesrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seriesrequest());
    }

    // optional .LS.ArtworkRequest artworkRequest = 1001;
    if (has_artworkrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artworkrequest());
    }

    // optional .LS.SeriesResponse seriesResponse = 2000;
    if (has_seriesresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seriesresponse());
    }

    // optional .LS.ArtworkResponse artworkResponse = 2001;
    if (has_artworkresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artworkresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_seriesrequest()) {
      mutable_seriesrequest()->::LS::SeriesRequest::MergeFrom(from.seriesrequest());
    }
    if (from.has_artworkrequest()) {
      mutable_artworkrequest()->::LS::ArtworkRequest::MergeFrom(from.artworkrequest());
    }
    if (from.has_seriesresponse()) {
      mutable_seriesresponse()->::LS::SeriesResponse::MergeFrom(from.seriesresponse());
    }
    if (from.has_artworkresponse()) {
      mutable_artworkresponse()->::LS::ArtworkResponse::MergeFrom(from.artworkresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_artworkrequest()) {
    if (!this->artworkrequest().IsInitialized()) return false;
  }
  if (has_seriesresponse()) {
    if (!this->seriesresponse().IsInitialized()) return false;
  }
  if (has_artworkresponse()) {
    if (!this->artworkresponse().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(seriesrequest_, other->seriesrequest_);
    std::swap(artworkrequest_, other->artworkrequest_);
    std::swap(seriesresponse_, other->seriesresponse_);
    std::swap(artworkresponse_, other->artworkresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SeriesRequest::SeriesRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesRequest::InitAsDefaultInstance() {
}

SeriesRequest::SeriesRequest(const SeriesRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesRequest::~SeriesRequest() {
  SharedDtor();
}

void SeriesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_descriptor_;
}

const SeriesRequest& SeriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesRequest* SeriesRequest::default_instance_ = NULL;

SeriesRequest* SeriesRequest::New() const {
  return new SeriesRequest;
}

void SeriesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SeriesRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesRequest::MergeFrom(const SeriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesRequest::CopyFrom(const SeriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesRequest::IsInitialized() const {

  return true;
}

void SeriesRequest::Swap(SeriesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesRequest_descriptor_;
  metadata.reflection = SeriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeriesResponse_TVShow::kTitleFieldNumber;
const int SeriesResponse_TVShow::kOriginalTitleFieldNumber;
const int SeriesResponse_TVShow::kSeasonNumberFieldNumber;
const int SeriesResponse_TVShow::kSnapshotFieldNumber;
#endif  // !_MSC_VER

SeriesResponse_TVShow::SeriesResponse_TVShow()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesResponse_TVShow::InitAsDefaultInstance() {
}

SeriesResponse_TVShow::SeriesResponse_TVShow(const SeriesResponse_TVShow& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesResponse_TVShow::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  seasonnumber_ = 0;
  snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesResponse_TVShow::~SeriesResponse_TVShow() {
  SharedDtor();
}

void SeriesResponse_TVShow::SharedDtor() {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (this != default_instance_) {
  }
}

void SeriesResponse_TVShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesResponse_TVShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesResponse_TVShow_descriptor_;
}

const SeriesResponse_TVShow& SeriesResponse_TVShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesResponse_TVShow* SeriesResponse_TVShow::default_instance_ = NULL;

SeriesResponse_TVShow* SeriesResponse_TVShow::New() const {
  return new SeriesResponse_TVShow;
}

void SeriesResponse_TVShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google_public::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_originaltitle()) {
      if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
        originaltitle_->clear();
      }
    }
    seasonnumber_ = 0;
    if (has_snapshot()) {
      if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesResponse_TVShow::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalTitle;
        break;
      }

      // required string originalTitle = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalTitle:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originaltitle()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originaltitle().data(), this->originaltitle().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seasonNumber;
        break;
      }

      // required int32 seasonNumber = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seasonNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasonnumber_)));
          set_has_seasonnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_snapshot;
        break;
      }

      // required string snapshot = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesResponse_TVShow::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->originaltitle(), output);
  }

  // required int32 seasonNumber = 3;
  if (has_seasonnumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->seasonnumber(), output);
  }

  // required string snapshot = 4;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesResponse_TVShow::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originaltitle(), target);
  }

  // required int32 seasonNumber = 3;
  if (has_seasonnumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seasonnumber(), target);
  }

  // required string snapshot = 4;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesResponse_TVShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string originalTitle = 2;
    if (has_originaltitle()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->originaltitle());
    }

    // required int32 seasonNumber = 3;
    if (has_seasonnumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->seasonnumber());
    }

    // required string snapshot = 4;
    if (has_snapshot()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesResponse_TVShow::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesResponse_TVShow* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesResponse_TVShow*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesResponse_TVShow::MergeFrom(const SeriesResponse_TVShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_originaltitle()) {
      set_originaltitle(from.originaltitle());
    }
    if (from.has_seasonnumber()) {
      set_seasonnumber(from.seasonnumber());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesResponse_TVShow::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesResponse_TVShow::CopyFrom(const SeriesResponse_TVShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesResponse_TVShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SeriesResponse_TVShow::Swap(SeriesResponse_TVShow* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(originaltitle_, other->originaltitle_);
    std::swap(seasonnumber_, other->seasonnumber_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesResponse_TVShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesResponse_TVShow_descriptor_;
  metadata.reflection = SeriesResponse_TVShow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SeriesResponse::kShowsFieldNumber;
#endif  // !_MSC_VER

SeriesResponse::SeriesResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesResponse::InitAsDefaultInstance() {
}

SeriesResponse::SeriesResponse(const SeriesResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesResponse::~SeriesResponse() {
  SharedDtor();
}

void SeriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesResponse_descriptor_;
}

const SeriesResponse& SeriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesResponse* SeriesResponse::default_instance_ = NULL;

SeriesResponse* SeriesResponse::New() const {
  return new SeriesResponse;
}

void SeriesResponse::Clear() {
  shows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LS.SeriesResponse.TVShow shows = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shows:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shows;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // repeated .LS.SeriesResponse.TVShow shows = 1;
  for (int i = 0; i < this->shows_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // repeated .LS.SeriesResponse.TVShow shows = 1;
  for (int i = 0; i < this->shows_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .LS.SeriesResponse.TVShow shows = 1;
  total_size += 1 * this->shows_size();
  for (int i = 0; i < this->shows_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesResponse::MergeFrom(const SeriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  shows_.MergeFrom(from.shows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesResponse::CopyFrom(const SeriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesResponse::IsInitialized() const {

  for (int i = 0; i < shows_size(); i++) {
    if (!this->shows(i).IsInitialized()) return false;
  }
  return true;
}

void SeriesResponse::Swap(SeriesResponse* other) {
  if (other != this) {
    shows_.Swap(&other->shows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesResponse_descriptor_;
  metadata.reflection = SeriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtworkRequest::kSnapshotFieldNumber;
const int ArtworkRequest::kOriginalTitleFieldNumber;
#endif  // !_MSC_VER

ArtworkRequest::ArtworkRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void ArtworkRequest::InitAsDefaultInstance() {
}

ArtworkRequest::ArtworkRequest(const ArtworkRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtworkRequest::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtworkRequest::~ArtworkRequest() {
  SharedDtor();
}

void ArtworkRequest::SharedDtor() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (this != default_instance_) {
  }
}

void ArtworkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ArtworkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtworkRequest_descriptor_;
}

const ArtworkRequest& ArtworkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

ArtworkRequest* ArtworkRequest::default_instance_ = NULL;

ArtworkRequest* ArtworkRequest::New() const {
  return new ArtworkRequest;
}

void ArtworkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshot_->clear();
      }
    }
    if (has_originaltitle()) {
      if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
        originaltitle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtworkRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshot = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalTitle;
        break;
      }

      // required string originalTitle = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalTitle:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originaltitle()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originaltitle().data(), this->originaltitle().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtworkRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string snapshot = 1;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshot(), output);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->originaltitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* ArtworkRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string snapshot = 1;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot(), target);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originaltitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtworkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
    }

    // required string originalTitle = 2;
    if (has_originaltitle()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->originaltitle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtworkRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtworkRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ArtworkRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtworkRequest::MergeFrom(const ArtworkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_originaltitle()) {
      set_originaltitle(from.originaltitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtworkRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtworkRequest::CopyFrom(const ArtworkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtworkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ArtworkRequest::Swap(ArtworkRequest* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(originaltitle_, other->originaltitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ArtworkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ArtworkRequest_descriptor_;
  metadata.reflection = ArtworkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtworkResponse::kSnapshotFieldNumber;
const int ArtworkResponse::kOriginalTitleFieldNumber;
const int ArtworkResponse::kArtworkFieldNumber;
#endif  // !_MSC_VER

ArtworkResponse::ArtworkResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void ArtworkResponse::InitAsDefaultInstance() {
}

ArtworkResponse::ArtworkResponse(const ArtworkResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtworkResponse::SharedCtor() {
  _cached_size_ = 0;
  snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  artwork_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtworkResponse::~ArtworkResponse() {
  SharedDtor();
}

void ArtworkResponse::SharedDtor() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (artwork_ != &::google_public::protobuf::internal::kEmptyString) {
    delete artwork_;
  }
  if (this != default_instance_) {
  }
}

void ArtworkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ArtworkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtworkResponse_descriptor_;
}

const ArtworkResponse& ArtworkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

ArtworkResponse* ArtworkResponse::default_instance_ = NULL;

ArtworkResponse* ArtworkResponse::New() const {
  return new ArtworkResponse;
}

void ArtworkResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshot()) {
      if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshot_->clear();
      }
    }
    if (has_originaltitle()) {
      if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
        originaltitle_->clear();
      }
    }
    if (has_artwork()) {
      if (artwork_ != &::google_public::protobuf::internal::kEmptyString) {
        artwork_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtworkResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshot = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalTitle;
        break;
      }

      // required string originalTitle = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalTitle:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originaltitle()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originaltitle().data(), this->originaltitle().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_artwork;
        break;
      }

      // required bytes artwork = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artwork:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_artwork()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtworkResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string snapshot = 1;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshot(), output);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->originaltitle(), output);
  }

  // required bytes artwork = 3;
  if (has_artwork()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->artwork(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* ArtworkResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string snapshot = 1;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot(), target);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originaltitle(), target);
  }

  // required bytes artwork = 3;
  if (has_artwork()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->artwork(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtworkResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshot = 1;
    if (has_snapshot()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
    }

    // required string originalTitle = 2;
    if (has_originaltitle()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->originaltitle());
    }

    // required bytes artwork = 3;
    if (has_artwork()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->artwork());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtworkResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtworkResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ArtworkResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtworkResponse::MergeFrom(const ArtworkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
    if (from.has_originaltitle()) {
      set_originaltitle(from.originaltitle());
    }
    if (from.has_artwork()) {
      set_artwork(from.artwork());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtworkResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtworkResponse::CopyFrom(const ArtworkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtworkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ArtworkResponse::Swap(ArtworkResponse* other) {
  if (other != this) {
    std::swap(snapshot_, other->snapshot_);
    std::swap(originaltitle_, other->originaltitle_);
    std::swap(artwork_, other->artwork_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ArtworkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ArtworkResponse_descriptor_;
  metadata.reflection = ArtworkResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LS

// @@protoc_insertion_point(global_scope)
