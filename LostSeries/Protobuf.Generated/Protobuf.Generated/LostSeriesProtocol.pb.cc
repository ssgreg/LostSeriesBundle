// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LostSeriesProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LostSeriesProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LS {

namespace {

const ::google_public::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SubscriptionRecord_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SubscriptionRecord_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesResponse_Episode_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesResponse_Episode_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SeriesResponse_TVShow_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SeriesResponse_TVShow_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ArtworkRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ArtworkRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ArtworkResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ArtworkResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SetSubscriptionRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SetSubscriptionRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SetSubscriptionResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SetSubscriptionResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetSubscriptionRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetSubscriptionResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetUnwatchedSeriesRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetUnwatchedSeriesRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetUnwatchedSeriesResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetUnwatchedSeriesResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetUnwatchedSeriesResponse_Episode_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetUnwatchedSeriesResponse_Episode_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SetUnwatchedSeriesRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SetUnwatchedSeriesRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SetUnwatchedSeriesRequest_Episode_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SetUnwatchedSeriesRequest_Episode_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SetUnwatchedSeriesResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SetUnwatchedSeriesResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetSnapshotsRequest_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetSnapshotsRequest_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetSnapshotsResponse_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetSnapshotsResponse_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetSnapshotsResponse_SnapshotArtwork_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetSnapshotsResponse_SnapshotArtwork_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LostSeriesProtocol_2eproto() {
  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LostSeriesProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, messageid_),
  };
  Header_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Message_descriptor_ = file->message_type(1);
  static const int Message_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, seriesrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, artworkrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, setsubscriptionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, getsubscriptionrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, getunwatchedseriesrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, setunwatchedseriesrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, getsnapshotsrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, seriesresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, artworkresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, setsubscriptionresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, getsubscriptionresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, getunwatchedseriesresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, setunwatchedseriesresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, getsnapshotsresponse_),
  };
  Message_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  SubscriptionRecord_descriptor_ = file->message_type(2);
  static const int SubscriptionRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, id_),
  };
  SubscriptionRecord_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SubscriptionRecord_descriptor_,
      SubscriptionRecord::default_instance_,
      SubscriptionRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRecord, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionRecord));
  SeriesRequest_descriptor_ = file->message_type(3);
  static const int SeriesRequest_offsets_[1] = {
  };
  SeriesRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesRequest_descriptor_,
      SeriesRequest::default_instance_,
      SeriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesRequest));
  SeriesResponse_descriptor_ = file->message_type(4);
  static const int SeriesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse, shows_),
  };
  SeriesResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesResponse_descriptor_,
      SeriesResponse::default_instance_,
      SeriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesResponse));
  SeriesResponse_Episode_descriptor_ = SeriesResponse_descriptor_->nested_type(0);
  static const int SeriesResponse_Episode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_Episode, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_Episode, originalname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_Episode, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_Episode, datetranslate_),
  };
  SeriesResponse_Episode_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesResponse_Episode_descriptor_,
      SeriesResponse_Episode::default_instance_,
      SeriesResponse_Episode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_Episode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_Episode, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesResponse_Episode));
  SeriesResponse_TVShow_descriptor_ = SeriesResponse_descriptor_->nested_type(1);
  static const int SeriesResponse_TVShow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, originaltitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, seasonnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, episodenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, snapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, episodes_),
  };
  SeriesResponse_TVShow_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SeriesResponse_TVShow_descriptor_,
      SeriesResponse_TVShow::default_instance_,
      SeriesResponse_TVShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesResponse_TVShow, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesResponse_TVShow));
  ArtworkRequest_descriptor_ = file->message_type(5);
  static const int ArtworkRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, idshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, seasonnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, snapshot_),
  };
  ArtworkRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ArtworkRequest_descriptor_,
      ArtworkRequest::default_instance_,
      ArtworkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtworkRequest));
  ArtworkResponse_descriptor_ = file->message_type(6);
  static const int ArtworkResponse_offsets_[1] = {
  };
  ArtworkResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ArtworkResponse_descriptor_,
      ArtworkResponse::default_instance_,
      ArtworkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtworkResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtworkResponse));
  SetSubscriptionRequest_descriptor_ = file->message_type(7);
  static const int SetSubscriptionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionRequest, idclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionRequest, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionRequest, flagunsubscribe_),
  };
  SetSubscriptionRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SetSubscriptionRequest_descriptor_,
      SetSubscriptionRequest::default_instance_,
      SetSubscriptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSubscriptionRequest));
  SetSubscriptionResponse_descriptor_ = file->message_type(8);
  static const int SetSubscriptionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionResponse, result_),
  };
  SetSubscriptionResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SetSubscriptionResponse_descriptor_,
      SetSubscriptionResponse::default_instance_,
      SetSubscriptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSubscriptionResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSubscriptionResponse));
  GetSubscriptionRequest_descriptor_ = file->message_type(9);
  static const int GetSubscriptionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionRequest, idclient_),
  };
  GetSubscriptionRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetSubscriptionRequest_descriptor_,
      GetSubscriptionRequest::default_instance_,
      GetSubscriptionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriptionRequest));
  GetSubscriptionResponse_descriptor_ = file->message_type(10);
  static const int GetSubscriptionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionResponse, subscriptions_),
  };
  GetSubscriptionResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetSubscriptionResponse_descriptor_,
      GetSubscriptionResponse::default_instance_,
      GetSubscriptionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriptionResponse));
  GetUnwatchedSeriesRequest_descriptor_ = file->message_type(11);
  static const int GetUnwatchedSeriesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesRequest, idclient_),
  };
  GetUnwatchedSeriesRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetUnwatchedSeriesRequest_descriptor_,
      GetUnwatchedSeriesRequest::default_instance_,
      GetUnwatchedSeriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnwatchedSeriesRequest));
  GetUnwatchedSeriesResponse_descriptor_ = file->message_type(12);
  static const int GetUnwatchedSeriesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse, episodes_),
  };
  GetUnwatchedSeriesResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetUnwatchedSeriesResponse_descriptor_,
      GetUnwatchedSeriesResponse::default_instance_,
      GetUnwatchedSeriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnwatchedSeriesResponse));
  GetUnwatchedSeriesResponse_Episode_descriptor_ = GetUnwatchedSeriesResponse_descriptor_->nested_type(0);
  static const int GetUnwatchedSeriesResponse_Episode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse_Episode, idshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse_Episode, numberseason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse_Episode, numberepisode_),
  };
  GetUnwatchedSeriesResponse_Episode_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetUnwatchedSeriesResponse_Episode_descriptor_,
      GetUnwatchedSeriesResponse_Episode::default_instance_,
      GetUnwatchedSeriesResponse_Episode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse_Episode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUnwatchedSeriesResponse_Episode, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUnwatchedSeriesResponse_Episode));
  SetUnwatchedSeriesRequest_descriptor_ = file->message_type(13);
  static const int SetUnwatchedSeriesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest, idclient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest, episodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest, flagremove_),
  };
  SetUnwatchedSeriesRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SetUnwatchedSeriesRequest_descriptor_,
      SetUnwatchedSeriesRequest::default_instance_,
      SetUnwatchedSeriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUnwatchedSeriesRequest));
  SetUnwatchedSeriesRequest_Episode_descriptor_ = SetUnwatchedSeriesRequest_descriptor_->nested_type(0);
  static const int SetUnwatchedSeriesRequest_Episode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest_Episode, idshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest_Episode, numberseason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest_Episode, numberepisode_),
  };
  SetUnwatchedSeriesRequest_Episode_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SetUnwatchedSeriesRequest_Episode_descriptor_,
      SetUnwatchedSeriesRequest_Episode::default_instance_,
      SetUnwatchedSeriesRequest_Episode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest_Episode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesRequest_Episode, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUnwatchedSeriesRequest_Episode));
  SetUnwatchedSeriesResponse_descriptor_ = file->message_type(14);
  static const int SetUnwatchedSeriesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesResponse, result_),
  };
  SetUnwatchedSeriesResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SetUnwatchedSeriesResponse_descriptor_,
      SetUnwatchedSeriesResponse::default_instance_,
      SetUnwatchedSeriesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUnwatchedSeriesResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUnwatchedSeriesResponse));
  GetSnapshotsRequest_descriptor_ = file->message_type(15);
  static const int GetSnapshotsRequest_offsets_[1] = {
  };
  GetSnapshotsRequest_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetSnapshotsRequest_descriptor_,
      GetSnapshotsRequest::default_instance_,
      GetSnapshotsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsRequest, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshotsRequest));
  GetSnapshotsResponse_descriptor_ = file->message_type(16);
  static const int GetSnapshotsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse, snapshotseries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse, snapshotsartwork_),
  };
  GetSnapshotsResponse_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetSnapshotsResponse_descriptor_,
      GetSnapshotsResponse::default_instance_,
      GetSnapshotsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshotsResponse));
  GetSnapshotsResponse_SnapshotArtwork_descriptor_ = GetSnapshotsResponse_descriptor_->nested_type(0);
  static const int GetSnapshotsResponse_SnapshotArtwork_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse_SnapshotArtwork, idshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse_SnapshotArtwork, numberseason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse_SnapshotArtwork, snapshot_),
  };
  GetSnapshotsResponse_SnapshotArtwork_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetSnapshotsResponse_SnapshotArtwork_descriptor_,
      GetSnapshotsResponse_SnapshotArtwork::default_instance_,
      GetSnapshotsResponse_SnapshotArtwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse_SnapshotArtwork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotsResponse_SnapshotArtwork, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshotsResponse_SnapshotArtwork));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LostSeriesProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionRecord_descriptor_, &SubscriptionRecord::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesRequest_descriptor_, &SeriesRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesResponse_descriptor_, &SeriesResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesResponse_Episode_descriptor_, &SeriesResponse_Episode::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesResponse_TVShow_descriptor_, &SeriesResponse_TVShow::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtworkRequest_descriptor_, &ArtworkRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtworkResponse_descriptor_, &ArtworkResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSubscriptionRequest_descriptor_, &SetSubscriptionRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSubscriptionResponse_descriptor_, &SetSubscriptionResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriptionRequest_descriptor_, &GetSubscriptionRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriptionResponse_descriptor_, &GetSubscriptionResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnwatchedSeriesRequest_descriptor_, &GetUnwatchedSeriesRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnwatchedSeriesResponse_descriptor_, &GetUnwatchedSeriesResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUnwatchedSeriesResponse_Episode_descriptor_, &GetUnwatchedSeriesResponse_Episode::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUnwatchedSeriesRequest_descriptor_, &SetUnwatchedSeriesRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUnwatchedSeriesRequest_Episode_descriptor_, &SetUnwatchedSeriesRequest_Episode::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUnwatchedSeriesResponse_descriptor_, &SetUnwatchedSeriesResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshotsRequest_descriptor_, &GetSnapshotsRequest::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshotsResponse_descriptor_, &GetSnapshotsResponse::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshotsResponse_SnapshotArtwork_descriptor_, &GetSnapshotsResponse_SnapshotArtwork::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LostSeriesProtocol_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete SubscriptionRecord::default_instance_;
  delete SubscriptionRecord_reflection_;
  delete SeriesRequest::default_instance_;
  delete SeriesRequest_reflection_;
  delete SeriesResponse::default_instance_;
  delete SeriesResponse_reflection_;
  delete SeriesResponse_Episode::default_instance_;
  delete SeriesResponse_Episode_reflection_;
  delete SeriesResponse_TVShow::default_instance_;
  delete SeriesResponse_TVShow_reflection_;
  delete ArtworkRequest::default_instance_;
  delete ArtworkRequest_reflection_;
  delete ArtworkResponse::default_instance_;
  delete ArtworkResponse_reflection_;
  delete SetSubscriptionRequest::default_instance_;
  delete SetSubscriptionRequest_reflection_;
  delete SetSubscriptionResponse::default_instance_;
  delete SetSubscriptionResponse_reflection_;
  delete GetSubscriptionRequest::default_instance_;
  delete GetSubscriptionRequest_reflection_;
  delete GetSubscriptionResponse::default_instance_;
  delete GetSubscriptionResponse_reflection_;
  delete GetUnwatchedSeriesRequest::default_instance_;
  delete GetUnwatchedSeriesRequest_reflection_;
  delete GetUnwatchedSeriesResponse::default_instance_;
  delete GetUnwatchedSeriesResponse_reflection_;
  delete GetUnwatchedSeriesResponse_Episode::default_instance_;
  delete GetUnwatchedSeriesResponse_Episode_reflection_;
  delete SetUnwatchedSeriesRequest::default_instance_;
  delete SetUnwatchedSeriesRequest_reflection_;
  delete SetUnwatchedSeriesRequest_Episode::default_instance_;
  delete SetUnwatchedSeriesRequest_Episode_reflection_;
  delete SetUnwatchedSeriesResponse::default_instance_;
  delete SetUnwatchedSeriesResponse_reflection_;
  delete GetSnapshotsRequest::default_instance_;
  delete GetSnapshotsRequest_reflection_;
  delete GetSnapshotsResponse::default_instance_;
  delete GetSnapshotsResponse_reflection_;
  delete GetSnapshotsResponse_SnapshotArtwork::default_instance_;
  delete GetSnapshotsResponse_SnapshotArtwork_reflection_;
}

void protobuf_AddDesc_LostSeriesProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030LostSeriesProtocol.proto\022\002LS\"\033\n\006Header"
    "\022\021\n\tmessageID\030\001 \002(\003\"\265\006\n\007Message\022)\n\rserie"
    "sRequest\030\350\007 \001(\0132\021.LS.SeriesRequest\022+\n\016ar"
    "tworkRequest\030\351\007 \001(\0132\022.LS.ArtworkRequest\022"
    ";\n\026setSubscriptionRequest\030\352\007 \001(\0132\032.LS.Se"
    "tSubscriptionRequest\022;\n\026getSubscriptionR"
    "equest\030\353\007 \001(\0132\032.LS.GetSubscriptionReques"
    "t\022A\n\031getUnwatchedSeriesRequest\030\354\007 \001(\0132\035."
    "LS.GetUnwatchedSeriesRequest\022A\n\031setUnwat"
    "chedSeriesRequest\030\355\007 \001(\0132\035.LS.SetUnwatch"
    "edSeriesRequest\0225\n\023getSnapshotsRequest\030\356"
    "\007 \001(\0132\027.LS.GetSnapshotsRequest\022+\n\016series"
    "Response\030\320\017 \001(\0132\022.LS.SeriesResponse\022-\n\017a"
    "rtworkResponse\030\321\017 \001(\0132\023.LS.ArtworkRespon"
    "se\022=\n\027setSubscriptionResponse\030\322\017 \001(\0132\033.L"
    "S.SetSubscriptionResponse\022=\n\027getSubscrip"
    "tionResponse\030\323\017 \001(\0132\033.LS.GetSubscription"
    "Response\022C\n\032getUnwatchedSeriesResponse\030\324"
    "\017 \001(\0132\036.LS.GetUnwatchedSeriesResponse\022C\n"
    "\032setUnwatchedSeriesResponse\030\325\017 \001(\0132\036.LS."
    "SetUnwatchedSeriesResponse\0227\n\024getSnapsho"
    "tsResponse\030\326\017 \001(\0132\030.LS.GetSnapshotsRespo"
    "nse\" \n\022SubscriptionRecord\022\n\n\002id\030\001 \002(\t\"\017\n"
    "\rSeriesRequest\"\272\002\n\016SeriesResponse\022(\n\005sho"
    "ws\030\001 \003(\0132\031.LS.SeriesResponse.TVShow\032T\n\007E"
    "pisode\022\014\n\004name\030\001 \002(\t\022\024\n\014originalName\030\002 \002"
    "(\t\022\016\n\006number\030\003 \002(\005\022\025\n\rdateTranslate\030\004 \002("
    "\t\032\247\001\n\006TVShow\022\r\n\005title\030\001 \002(\t\022\025\n\roriginalT"
    "itle\030\002 \002(\t\022\024\n\014seasonNumber\030\003 \002(\005\022\025\n\repis"
    "odeNumber\030\004 \002(\005\022\n\n\002id\030c \002(\t\022\020\n\010snapshot\030"
    "d \002(\t\022,\n\010episodes\030e \003(\0132\032.LS.SeriesRespo"
    "nse.Episode\"[\n\016ArtworkRequest\022\016\n\006idShow\030"
    "\001 \002(\t\022\024\n\014seasonNumber\030\002 \002(\005\022\021\n\tthumbnail"
    "\030\003 \002(\010\022\020\n\010snapshot\030d \002(\t\"\021\n\017ArtworkRespo"
    "nse\"\201\001\n\026SetSubscriptionRequest\022\020\n\010idClie"
    "nt\030\001 \002(\t\022\r\n\005token\030\002 \002(\t\022-\n\rsubscriptions"
    "\030\003 \003(\0132\026.LS.SubscriptionRecord\022\027\n\017flagUn"
    "subscribe\030\004 \002(\010\")\n\027SetSubscriptionRespon"
    "se\022\016\n\006result\030\001 \002(\010\"*\n\026GetSubscriptionReq"
    "uest\022\020\n\010idClient\030\001 \002(\t\"H\n\027GetSubscriptio"
    "nResponse\022-\n\rsubscriptions\030\001 \003(\0132\026.LS.Su"
    "bscriptionRecord\"-\n\031GetUnwatchedSeriesRe"
    "quest\022\020\n\010idClient\030\001 \002(\t\"\236\001\n\032GetUnwatched"
    "SeriesResponse\0228\n\010episodes\030\001 \003(\0132&.LS.Ge"
    "tUnwatchedSeriesResponse.Episode\032F\n\007Epis"
    "ode\022\016\n\006idShow\030\001 \002(\t\022\024\n\014numberSeason\030\002 \002("
    "\005\022\025\n\rnumberEpisode\030\003 \002(\005\"\302\001\n\031SetUnwatche"
    "dSeriesRequest\022\020\n\010idClient\030\001 \002(\t\0227\n\010epis"
    "odes\030\002 \003(\0132%.LS.SetUnwatchedSeriesReques"
    "t.Episode\022\022\n\nflagRemove\030\003 \002(\010\032F\n\007Episode"
    "\022\016\n\006idShow\030\001 \002(\t\022\024\n\014numberSeason\030\002 \002(\005\022\025"
    "\n\rnumberEpisode\030\003 \002(\005\",\n\032SetUnwatchedSer"
    "iesResponse\022\016\n\006result\030\001 \002(\010\"\025\n\023GetSnapsh"
    "otsRequest\"\275\001\n\024GetSnapshotsResponse\022\026\n\016s"
    "napshotSeries\030\001 \002(\t\022B\n\020snapshotsArtwork\030"
    "\002 \003(\0132(.LS.GetSnapshotsResponse.Snapshot"
    "Artwork\032I\n\017SnapshotArtwork\022\016\n\006idShow\030\001 \002"
    "(\t\022\024\n\014numberSeason\030\002 \002(\005\022\020\n\010snapshot\030\003 \002"
    "(\t", 2322);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LostSeriesProtocol.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Message::default_instance_ = new Message();
  SubscriptionRecord::default_instance_ = new SubscriptionRecord();
  SeriesRequest::default_instance_ = new SeriesRequest();
  SeriesResponse::default_instance_ = new SeriesResponse();
  SeriesResponse_Episode::default_instance_ = new SeriesResponse_Episode();
  SeriesResponse_TVShow::default_instance_ = new SeriesResponse_TVShow();
  ArtworkRequest::default_instance_ = new ArtworkRequest();
  ArtworkResponse::default_instance_ = new ArtworkResponse();
  SetSubscriptionRequest::default_instance_ = new SetSubscriptionRequest();
  SetSubscriptionResponse::default_instance_ = new SetSubscriptionResponse();
  GetSubscriptionRequest::default_instance_ = new GetSubscriptionRequest();
  GetSubscriptionResponse::default_instance_ = new GetSubscriptionResponse();
  GetUnwatchedSeriesRequest::default_instance_ = new GetUnwatchedSeriesRequest();
  GetUnwatchedSeriesResponse::default_instance_ = new GetUnwatchedSeriesResponse();
  GetUnwatchedSeriesResponse_Episode::default_instance_ = new GetUnwatchedSeriesResponse_Episode();
  SetUnwatchedSeriesRequest::default_instance_ = new SetUnwatchedSeriesRequest();
  SetUnwatchedSeriesRequest_Episode::default_instance_ = new SetUnwatchedSeriesRequest_Episode();
  SetUnwatchedSeriesResponse::default_instance_ = new SetUnwatchedSeriesResponse();
  GetSnapshotsRequest::default_instance_ = new GetSnapshotsRequest();
  GetSnapshotsResponse::default_instance_ = new GetSnapshotsResponse();
  GetSnapshotsResponse_SnapshotArtwork::default_instance_ = new GetSnapshotsResponse_SnapshotArtwork();
  Header::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  SubscriptionRecord::default_instance_->InitAsDefaultInstance();
  SeriesRequest::default_instance_->InitAsDefaultInstance();
  SeriesResponse::default_instance_->InitAsDefaultInstance();
  SeriesResponse_Episode::default_instance_->InitAsDefaultInstance();
  SeriesResponse_TVShow::default_instance_->InitAsDefaultInstance();
  ArtworkRequest::default_instance_->InitAsDefaultInstance();
  ArtworkResponse::default_instance_->InitAsDefaultInstance();
  SetSubscriptionRequest::default_instance_->InitAsDefaultInstance();
  SetSubscriptionResponse::default_instance_->InitAsDefaultInstance();
  GetSubscriptionRequest::default_instance_->InitAsDefaultInstance();
  GetSubscriptionResponse::default_instance_->InitAsDefaultInstance();
  GetUnwatchedSeriesRequest::default_instance_->InitAsDefaultInstance();
  GetUnwatchedSeriesResponse::default_instance_->InitAsDefaultInstance();
  GetUnwatchedSeriesResponse_Episode::default_instance_->InitAsDefaultInstance();
  SetUnwatchedSeriesRequest::default_instance_->InitAsDefaultInstance();
  SetUnwatchedSeriesRequest_Episode::default_instance_->InitAsDefaultInstance();
  SetUnwatchedSeriesResponse::default_instance_->InitAsDefaultInstance();
  GetSnapshotsRequest::default_instance_->InitAsDefaultInstance();
  GetSnapshotsResponse::default_instance_->InitAsDefaultInstance();
  GetSnapshotsResponse_SnapshotArtwork::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LostSeriesProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LostSeriesProtocol_2eproto {
  StaticDescriptorInitializer_LostSeriesProtocol_2eproto() {
    protobuf_AddDesc_LostSeriesProtocol_2eproto();
  }
} static_descriptor_initializer_LostSeriesProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Header::kMessageIDFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  messageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messageid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 messageID = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required int64 messageID = 1;
  if (has_messageid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(1, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required int64 messageID = 1;
  if (has_messageid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 messageID = 1;
    if (has_messageid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kSeriesRequestFieldNumber;
const int Message::kArtworkRequestFieldNumber;
const int Message::kSetSubscriptionRequestFieldNumber;
const int Message::kGetSubscriptionRequestFieldNumber;
const int Message::kGetUnwatchedSeriesRequestFieldNumber;
const int Message::kSetUnwatchedSeriesRequestFieldNumber;
const int Message::kGetSnapshotsRequestFieldNumber;
const int Message::kSeriesResponseFieldNumber;
const int Message::kArtworkResponseFieldNumber;
const int Message::kSetSubscriptionResponseFieldNumber;
const int Message::kGetSubscriptionResponseFieldNumber;
const int Message::kGetUnwatchedSeriesResponseFieldNumber;
const int Message::kSetUnwatchedSeriesResponseFieldNumber;
const int Message::kGetSnapshotsResponseFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
  seriesrequest_ = const_cast< ::LS::SeriesRequest*>(&::LS::SeriesRequest::default_instance());
  artworkrequest_ = const_cast< ::LS::ArtworkRequest*>(&::LS::ArtworkRequest::default_instance());
  setsubscriptionrequest_ = const_cast< ::LS::SetSubscriptionRequest*>(&::LS::SetSubscriptionRequest::default_instance());
  getsubscriptionrequest_ = const_cast< ::LS::GetSubscriptionRequest*>(&::LS::GetSubscriptionRequest::default_instance());
  getunwatchedseriesrequest_ = const_cast< ::LS::GetUnwatchedSeriesRequest*>(&::LS::GetUnwatchedSeriesRequest::default_instance());
  setunwatchedseriesrequest_ = const_cast< ::LS::SetUnwatchedSeriesRequest*>(&::LS::SetUnwatchedSeriesRequest::default_instance());
  getsnapshotsrequest_ = const_cast< ::LS::GetSnapshotsRequest*>(&::LS::GetSnapshotsRequest::default_instance());
  seriesresponse_ = const_cast< ::LS::SeriesResponse*>(&::LS::SeriesResponse::default_instance());
  artworkresponse_ = const_cast< ::LS::ArtworkResponse*>(&::LS::ArtworkResponse::default_instance());
  setsubscriptionresponse_ = const_cast< ::LS::SetSubscriptionResponse*>(&::LS::SetSubscriptionResponse::default_instance());
  getsubscriptionresponse_ = const_cast< ::LS::GetSubscriptionResponse*>(&::LS::GetSubscriptionResponse::default_instance());
  getunwatchedseriesresponse_ = const_cast< ::LS::GetUnwatchedSeriesResponse*>(&::LS::GetUnwatchedSeriesResponse::default_instance());
  setunwatchedseriesresponse_ = const_cast< ::LS::SetUnwatchedSeriesResponse*>(&::LS::SetUnwatchedSeriesResponse::default_instance());
  getsnapshotsresponse_ = const_cast< ::LS::GetSnapshotsResponse*>(&::LS::GetSnapshotsResponse::default_instance());
}

Message::Message(const Message& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  seriesrequest_ = NULL;
  artworkrequest_ = NULL;
  setsubscriptionrequest_ = NULL;
  getsubscriptionrequest_ = NULL;
  getunwatchedseriesrequest_ = NULL;
  setunwatchedseriesrequest_ = NULL;
  getsnapshotsrequest_ = NULL;
  seriesresponse_ = NULL;
  artworkresponse_ = NULL;
  setsubscriptionresponse_ = NULL;
  getsubscriptionresponse_ = NULL;
  getunwatchedseriesresponse_ = NULL;
  setunwatchedseriesresponse_ = NULL;
  getsnapshotsresponse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete seriesrequest_;
    delete artworkrequest_;
    delete setsubscriptionrequest_;
    delete getsubscriptionrequest_;
    delete getunwatchedseriesrequest_;
    delete setunwatchedseriesrequest_;
    delete getsnapshotsrequest_;
    delete seriesresponse_;
    delete artworkresponse_;
    delete setsubscriptionresponse_;
    delete getsubscriptionresponse_;
    delete getunwatchedseriesresponse_;
    delete setunwatchedseriesresponse_;
    delete getsnapshotsresponse_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesrequest()) {
      if (seriesrequest_ != NULL) seriesrequest_->::LS::SeriesRequest::Clear();
    }
    if (has_artworkrequest()) {
      if (artworkrequest_ != NULL) artworkrequest_->::LS::ArtworkRequest::Clear();
    }
    if (has_setsubscriptionrequest()) {
      if (setsubscriptionrequest_ != NULL) setsubscriptionrequest_->::LS::SetSubscriptionRequest::Clear();
    }
    if (has_getsubscriptionrequest()) {
      if (getsubscriptionrequest_ != NULL) getsubscriptionrequest_->::LS::GetSubscriptionRequest::Clear();
    }
    if (has_getunwatchedseriesrequest()) {
      if (getunwatchedseriesrequest_ != NULL) getunwatchedseriesrequest_->::LS::GetUnwatchedSeriesRequest::Clear();
    }
    if (has_setunwatchedseriesrequest()) {
      if (setunwatchedseriesrequest_ != NULL) setunwatchedseriesrequest_->::LS::SetUnwatchedSeriesRequest::Clear();
    }
    if (has_getsnapshotsrequest()) {
      if (getsnapshotsrequest_ != NULL) getsnapshotsrequest_->::LS::GetSnapshotsRequest::Clear();
    }
    if (has_seriesresponse()) {
      if (seriesresponse_ != NULL) seriesresponse_->::LS::SeriesResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_artworkresponse()) {
      if (artworkresponse_ != NULL) artworkresponse_->::LS::ArtworkResponse::Clear();
    }
    if (has_setsubscriptionresponse()) {
      if (setsubscriptionresponse_ != NULL) setsubscriptionresponse_->::LS::SetSubscriptionResponse::Clear();
    }
    if (has_getsubscriptionresponse()) {
      if (getsubscriptionresponse_ != NULL) getsubscriptionresponse_->::LS::GetSubscriptionResponse::Clear();
    }
    if (has_getunwatchedseriesresponse()) {
      if (getunwatchedseriesresponse_ != NULL) getunwatchedseriesresponse_->::LS::GetUnwatchedSeriesResponse::Clear();
    }
    if (has_setunwatchedseriesresponse()) {
      if (setunwatchedseriesresponse_ != NULL) setunwatchedseriesresponse_->::LS::SetUnwatchedSeriesResponse::Clear();
    }
    if (has_getsnapshotsresponse()) {
      if (getsnapshotsresponse_ != NULL) getsnapshotsresponse_->::LS::GetSnapshotsResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LS.SeriesRequest seriesRequest = 1000;
      case 1000: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seriesrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_artworkRequest;
        break;
      }

      // optional .LS.ArtworkRequest artworkRequest = 1001;
      case 1001: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artworkRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artworkrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8018)) goto parse_setSubscriptionRequest;
        break;
      }

      // optional .LS.SetSubscriptionRequest setSubscriptionRequest = 1002;
      case 1002: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setSubscriptionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setsubscriptionrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8026)) goto parse_getSubscriptionRequest;
        break;
      }

      // optional .LS.GetSubscriptionRequest getSubscriptionRequest = 1003;
      case 1003: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getSubscriptionRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsubscriptionrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8034)) goto parse_getUnwatchedSeriesRequest;
        break;
      }

      // optional .LS.GetUnwatchedSeriesRequest getUnwatchedSeriesRequest = 1004;
      case 1004: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getUnwatchedSeriesRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getunwatchedseriesrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8042)) goto parse_setUnwatchedSeriesRequest;
        break;
      }

      // optional .LS.SetUnwatchedSeriesRequest setUnwatchedSeriesRequest = 1005;
      case 1005: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setUnwatchedSeriesRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setunwatchedseriesrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8050)) goto parse_getSnapshotsRequest;
        break;
      }

      // optional .LS.GetSnapshotsRequest getSnapshotsRequest = 1006;
      case 1006: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getSnapshotsRequest:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsnapshotsrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16002)) goto parse_seriesResponse;
        break;
      }

      // optional .LS.SeriesResponse seriesResponse = 2000;
      case 2000: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seriesresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16010)) goto parse_artworkResponse;
        break;
      }

      // optional .LS.ArtworkResponse artworkResponse = 2001;
      case 2001: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artworkResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artworkresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16018)) goto parse_setSubscriptionResponse;
        break;
      }

      // optional .LS.SetSubscriptionResponse setSubscriptionResponse = 2002;
      case 2002: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setSubscriptionResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setsubscriptionresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16026)) goto parse_getSubscriptionResponse;
        break;
      }

      // optional .LS.GetSubscriptionResponse getSubscriptionResponse = 2003;
      case 2003: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getSubscriptionResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsubscriptionresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16034)) goto parse_getUnwatchedSeriesResponse;
        break;
      }

      // optional .LS.GetUnwatchedSeriesResponse getUnwatchedSeriesResponse = 2004;
      case 2004: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getUnwatchedSeriesResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getunwatchedseriesresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16042)) goto parse_setUnwatchedSeriesResponse;
        break;
      }

      // optional .LS.SetUnwatchedSeriesResponse setUnwatchedSeriesResponse = 2005;
      case 2005: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setUnwatchedSeriesResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setunwatchedseriesresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16050)) goto parse_getSnapshotsResponse;
        break;
      }

      // optional .LS.GetSnapshotsResponse getSnapshotsResponse = 2006;
      case 2006: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getSnapshotsResponse:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getsnapshotsresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional .LS.SeriesRequest seriesRequest = 1000;
  if (has_seriesrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->seriesrequest(), output);
  }

  // optional .LS.ArtworkRequest artworkRequest = 1001;
  if (has_artworkrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->artworkrequest(), output);
  }

  // optional .LS.SetSubscriptionRequest setSubscriptionRequest = 1002;
  if (has_setsubscriptionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002, this->setsubscriptionrequest(), output);
  }

  // optional .LS.GetSubscriptionRequest getSubscriptionRequest = 1003;
  if (has_getsubscriptionrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003, this->getsubscriptionrequest(), output);
  }

  // optional .LS.GetUnwatchedSeriesRequest getUnwatchedSeriesRequest = 1004;
  if (has_getunwatchedseriesrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004, this->getunwatchedseriesrequest(), output);
  }

  // optional .LS.SetUnwatchedSeriesRequest setUnwatchedSeriesRequest = 1005;
  if (has_setunwatchedseriesrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1005, this->setunwatchedseriesrequest(), output);
  }

  // optional .LS.GetSnapshotsRequest getSnapshotsRequest = 1006;
  if (has_getsnapshotsrequest()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1006, this->getsnapshotsrequest(), output);
  }

  // optional .LS.SeriesResponse seriesResponse = 2000;
  if (has_seriesresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2000, this->seriesresponse(), output);
  }

  // optional .LS.ArtworkResponse artworkResponse = 2001;
  if (has_artworkresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2001, this->artworkresponse(), output);
  }

  // optional .LS.SetSubscriptionResponse setSubscriptionResponse = 2002;
  if (has_setsubscriptionresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2002, this->setsubscriptionresponse(), output);
  }

  // optional .LS.GetSubscriptionResponse getSubscriptionResponse = 2003;
  if (has_getsubscriptionresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2003, this->getsubscriptionresponse(), output);
  }

  // optional .LS.GetUnwatchedSeriesResponse getUnwatchedSeriesResponse = 2004;
  if (has_getunwatchedseriesresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2004, this->getunwatchedseriesresponse(), output);
  }

  // optional .LS.SetUnwatchedSeriesResponse setUnwatchedSeriesResponse = 2005;
  if (has_setunwatchedseriesresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2005, this->setunwatchedseriesresponse(), output);
  }

  // optional .LS.GetSnapshotsResponse getSnapshotsResponse = 2006;
  if (has_getsnapshotsresponse()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2006, this->getsnapshotsresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // optional .LS.SeriesRequest seriesRequest = 1000;
  if (has_seriesrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->seriesrequest(), target);
  }

  // optional .LS.ArtworkRequest artworkRequest = 1001;
  if (has_artworkrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->artworkrequest(), target);
  }

  // optional .LS.SetSubscriptionRequest setSubscriptionRequest = 1002;
  if (has_setsubscriptionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1002, this->setsubscriptionrequest(), target);
  }

  // optional .LS.GetSubscriptionRequest getSubscriptionRequest = 1003;
  if (has_getsubscriptionrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1003, this->getsubscriptionrequest(), target);
  }

  // optional .LS.GetUnwatchedSeriesRequest getUnwatchedSeriesRequest = 1004;
  if (has_getunwatchedseriesrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1004, this->getunwatchedseriesrequest(), target);
  }

  // optional .LS.SetUnwatchedSeriesRequest setUnwatchedSeriesRequest = 1005;
  if (has_setunwatchedseriesrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1005, this->setunwatchedseriesrequest(), target);
  }

  // optional .LS.GetSnapshotsRequest getSnapshotsRequest = 1006;
  if (has_getsnapshotsrequest()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1006, this->getsnapshotsrequest(), target);
  }

  // optional .LS.SeriesResponse seriesResponse = 2000;
  if (has_seriesresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2000, this->seriesresponse(), target);
  }

  // optional .LS.ArtworkResponse artworkResponse = 2001;
  if (has_artworkresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2001, this->artworkresponse(), target);
  }

  // optional .LS.SetSubscriptionResponse setSubscriptionResponse = 2002;
  if (has_setsubscriptionresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2002, this->setsubscriptionresponse(), target);
  }

  // optional .LS.GetSubscriptionResponse getSubscriptionResponse = 2003;
  if (has_getsubscriptionresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2003, this->getsubscriptionresponse(), target);
  }

  // optional .LS.GetUnwatchedSeriesResponse getUnwatchedSeriesResponse = 2004;
  if (has_getunwatchedseriesresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2004, this->getunwatchedseriesresponse(), target);
  }

  // optional .LS.SetUnwatchedSeriesResponse setUnwatchedSeriesResponse = 2005;
  if (has_setunwatchedseriesresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2005, this->setunwatchedseriesresponse(), target);
  }

  // optional .LS.GetSnapshotsResponse getSnapshotsResponse = 2006;
  if (has_getsnapshotsresponse()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2006, this->getsnapshotsresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LS.SeriesRequest seriesRequest = 1000;
    if (has_seriesrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seriesrequest());
    }

    // optional .LS.ArtworkRequest artworkRequest = 1001;
    if (has_artworkrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artworkrequest());
    }

    // optional .LS.SetSubscriptionRequest setSubscriptionRequest = 1002;
    if (has_setsubscriptionrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setsubscriptionrequest());
    }

    // optional .LS.GetSubscriptionRequest getSubscriptionRequest = 1003;
    if (has_getsubscriptionrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsubscriptionrequest());
    }

    // optional .LS.GetUnwatchedSeriesRequest getUnwatchedSeriesRequest = 1004;
    if (has_getunwatchedseriesrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getunwatchedseriesrequest());
    }

    // optional .LS.SetUnwatchedSeriesRequest setUnwatchedSeriesRequest = 1005;
    if (has_setunwatchedseriesrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setunwatchedseriesrequest());
    }

    // optional .LS.GetSnapshotsRequest getSnapshotsRequest = 1006;
    if (has_getsnapshotsrequest()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsnapshotsrequest());
    }

    // optional .LS.SeriesResponse seriesResponse = 2000;
    if (has_seriesresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seriesresponse());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .LS.ArtworkResponse artworkResponse = 2001;
    if (has_artworkresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artworkresponse());
    }

    // optional .LS.SetSubscriptionResponse setSubscriptionResponse = 2002;
    if (has_setsubscriptionresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setsubscriptionresponse());
    }

    // optional .LS.GetSubscriptionResponse getSubscriptionResponse = 2003;
    if (has_getsubscriptionresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsubscriptionresponse());
    }

    // optional .LS.GetUnwatchedSeriesResponse getUnwatchedSeriesResponse = 2004;
    if (has_getunwatchedseriesresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getunwatchedseriesresponse());
    }

    // optional .LS.SetUnwatchedSeriesResponse setUnwatchedSeriesResponse = 2005;
    if (has_setunwatchedseriesresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setunwatchedseriesresponse());
    }

    // optional .LS.GetSnapshotsResponse getSnapshotsResponse = 2006;
    if (has_getsnapshotsresponse()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getsnapshotsresponse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesrequest()) {
      mutable_seriesrequest()->::LS::SeriesRequest::MergeFrom(from.seriesrequest());
    }
    if (from.has_artworkrequest()) {
      mutable_artworkrequest()->::LS::ArtworkRequest::MergeFrom(from.artworkrequest());
    }
    if (from.has_setsubscriptionrequest()) {
      mutable_setsubscriptionrequest()->::LS::SetSubscriptionRequest::MergeFrom(from.setsubscriptionrequest());
    }
    if (from.has_getsubscriptionrequest()) {
      mutable_getsubscriptionrequest()->::LS::GetSubscriptionRequest::MergeFrom(from.getsubscriptionrequest());
    }
    if (from.has_getunwatchedseriesrequest()) {
      mutable_getunwatchedseriesrequest()->::LS::GetUnwatchedSeriesRequest::MergeFrom(from.getunwatchedseriesrequest());
    }
    if (from.has_setunwatchedseriesrequest()) {
      mutable_setunwatchedseriesrequest()->::LS::SetUnwatchedSeriesRequest::MergeFrom(from.setunwatchedseriesrequest());
    }
    if (from.has_getsnapshotsrequest()) {
      mutable_getsnapshotsrequest()->::LS::GetSnapshotsRequest::MergeFrom(from.getsnapshotsrequest());
    }
    if (from.has_seriesresponse()) {
      mutable_seriesresponse()->::LS::SeriesResponse::MergeFrom(from.seriesresponse());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_artworkresponse()) {
      mutable_artworkresponse()->::LS::ArtworkResponse::MergeFrom(from.artworkresponse());
    }
    if (from.has_setsubscriptionresponse()) {
      mutable_setsubscriptionresponse()->::LS::SetSubscriptionResponse::MergeFrom(from.setsubscriptionresponse());
    }
    if (from.has_getsubscriptionresponse()) {
      mutable_getsubscriptionresponse()->::LS::GetSubscriptionResponse::MergeFrom(from.getsubscriptionresponse());
    }
    if (from.has_getunwatchedseriesresponse()) {
      mutable_getunwatchedseriesresponse()->::LS::GetUnwatchedSeriesResponse::MergeFrom(from.getunwatchedseriesresponse());
    }
    if (from.has_setunwatchedseriesresponse()) {
      mutable_setunwatchedseriesresponse()->::LS::SetUnwatchedSeriesResponse::MergeFrom(from.setunwatchedseriesresponse());
    }
    if (from.has_getsnapshotsresponse()) {
      mutable_getsnapshotsresponse()->::LS::GetSnapshotsResponse::MergeFrom(from.getsnapshotsresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  if (has_artworkrequest()) {
    if (!this->artworkrequest().IsInitialized()) return false;
  }
  if (has_setsubscriptionrequest()) {
    if (!this->setsubscriptionrequest().IsInitialized()) return false;
  }
  if (has_getsubscriptionrequest()) {
    if (!this->getsubscriptionrequest().IsInitialized()) return false;
  }
  if (has_getunwatchedseriesrequest()) {
    if (!this->getunwatchedseriesrequest().IsInitialized()) return false;
  }
  if (has_setunwatchedseriesrequest()) {
    if (!this->setunwatchedseriesrequest().IsInitialized()) return false;
  }
  if (has_seriesresponse()) {
    if (!this->seriesresponse().IsInitialized()) return false;
  }
  if (has_setsubscriptionresponse()) {
    if (!this->setsubscriptionresponse().IsInitialized()) return false;
  }
  if (has_getsubscriptionresponse()) {
    if (!this->getsubscriptionresponse().IsInitialized()) return false;
  }
  if (has_getunwatchedseriesresponse()) {
    if (!this->getunwatchedseriesresponse().IsInitialized()) return false;
  }
  if (has_setunwatchedseriesresponse()) {
    if (!this->setunwatchedseriesresponse().IsInitialized()) return false;
  }
  if (has_getsnapshotsresponse()) {
    if (!this->getsnapshotsresponse().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(seriesrequest_, other->seriesrequest_);
    std::swap(artworkrequest_, other->artworkrequest_);
    std::swap(setsubscriptionrequest_, other->setsubscriptionrequest_);
    std::swap(getsubscriptionrequest_, other->getsubscriptionrequest_);
    std::swap(getunwatchedseriesrequest_, other->getunwatchedseriesrequest_);
    std::swap(setunwatchedseriesrequest_, other->setunwatchedseriesrequest_);
    std::swap(getsnapshotsrequest_, other->getsnapshotsrequest_);
    std::swap(seriesresponse_, other->seriesresponse_);
    std::swap(artworkresponse_, other->artworkresponse_);
    std::swap(setsubscriptionresponse_, other->setsubscriptionresponse_);
    std::swap(getsubscriptionresponse_, other->getsubscriptionresponse_);
    std::swap(getunwatchedseriesresponse_, other->getunwatchedseriesresponse_);
    std::swap(setunwatchedseriesresponse_, other->setunwatchedseriesresponse_);
    std::swap(getsnapshotsresponse_, other->getsnapshotsresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionRecord::kIdFieldNumber;
#endif  // !_MSC_VER

SubscriptionRecord::SubscriptionRecord()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SubscriptionRecord::InitAsDefaultInstance() {
}

SubscriptionRecord::SubscriptionRecord(const SubscriptionRecord& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionRecord::~SubscriptionRecord() {
  SharedDtor();
}

void SubscriptionRecord::SharedDtor() {
  if (id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SubscriptionRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRecord_descriptor_;
}

const SubscriptionRecord& SubscriptionRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SubscriptionRecord* SubscriptionRecord::default_instance_ = NULL;

SubscriptionRecord* SubscriptionRecord::New() const {
  return new SubscriptionRecord;
}

void SubscriptionRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google_public::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionRecord::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionRecord::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SubscriptionRecord::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRecord::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionRecord* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SubscriptionRecord*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionRecord::MergeFrom(const SubscriptionRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionRecord::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRecord::CopyFrom(const SubscriptionRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubscriptionRecord::Swap(SubscriptionRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SubscriptionRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionRecord_descriptor_;
  metadata.reflection = SubscriptionRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SeriesRequest::SeriesRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesRequest::InitAsDefaultInstance() {
}

SeriesRequest::SeriesRequest(const SeriesRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesRequest::~SeriesRequest() {
  SharedDtor();
}

void SeriesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_descriptor_;
}

const SeriesRequest& SeriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesRequest* SeriesRequest::default_instance_ = NULL;

SeriesRequest* SeriesRequest::New() const {
  return new SeriesRequest;
}

void SeriesRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SeriesRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesRequest::MergeFrom(const SeriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesRequest::CopyFrom(const SeriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesRequest::IsInitialized() const {

  return true;
}

void SeriesRequest::Swap(SeriesRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesRequest_descriptor_;
  metadata.reflection = SeriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeriesResponse_Episode::kNameFieldNumber;
const int SeriesResponse_Episode::kOriginalNameFieldNumber;
const int SeriesResponse_Episode::kNumberFieldNumber;
const int SeriesResponse_Episode::kDateTranslateFieldNumber;
#endif  // !_MSC_VER

SeriesResponse_Episode::SeriesResponse_Episode()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesResponse_Episode::InitAsDefaultInstance() {
}

SeriesResponse_Episode::SeriesResponse_Episode(const SeriesResponse_Episode& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesResponse_Episode::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  originalname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  number_ = 0;
  datetranslate_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesResponse_Episode::~SeriesResponse_Episode() {
  SharedDtor();
}

void SeriesResponse_Episode::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (originalname_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originalname_;
  }
  if (datetranslate_ != &::google_public::protobuf::internal::kEmptyString) {
    delete datetranslate_;
  }
  if (this != default_instance_) {
  }
}

void SeriesResponse_Episode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesResponse_Episode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesResponse_Episode_descriptor_;
}

const SeriesResponse_Episode& SeriesResponse_Episode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesResponse_Episode* SeriesResponse_Episode::default_instance_ = NULL;

SeriesResponse_Episode* SeriesResponse_Episode::New() const {
  return new SeriesResponse_Episode;
}

void SeriesResponse_Episode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_originalname()) {
      if (originalname_ != &::google_public::protobuf::internal::kEmptyString) {
        originalname_->clear();
      }
    }
    number_ = 0;
    if (has_datetranslate()) {
      if (datetranslate_ != &::google_public::protobuf::internal::kEmptyString) {
        datetranslate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesResponse_Episode::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalName;
        break;
      }

      // required string originalName = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalName:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originalname().data(), this->originalname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // required int32 number = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dateTranslate;
        break;
      }

      // required string dateTranslate = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dateTranslate:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetranslate()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetranslate().data(), this->datetranslate().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesResponse_Episode::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string originalName = 2;
  if (has_originalname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originalname().data(), this->originalname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->originalname(), output);
  }

  // required int32 number = 3;
  if (has_number()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  // required string dateTranslate = 4;
  if (has_datetranslate()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetranslate().data(), this->datetranslate().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->datetranslate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesResponse_Episode::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string originalName = 2;
  if (has_originalname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originalname().data(), this->originalname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originalname(), target);
  }

  // required int32 number = 3;
  if (has_number()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  // required string dateTranslate = 4;
  if (has_datetranslate()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetranslate().data(), this->datetranslate().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datetranslate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesResponse_Episode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string originalName = 2;
    if (has_originalname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->originalname());
    }

    // required int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required string dateTranslate = 4;
    if (has_datetranslate()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->datetranslate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesResponse_Episode::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesResponse_Episode* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesResponse_Episode*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesResponse_Episode::MergeFrom(const SeriesResponse_Episode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_originalname()) {
      set_originalname(from.originalname());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_datetranslate()) {
      set_datetranslate(from.datetranslate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesResponse_Episode::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesResponse_Episode::CopyFrom(const SeriesResponse_Episode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesResponse_Episode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SeriesResponse_Episode::Swap(SeriesResponse_Episode* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(originalname_, other->originalname_);
    std::swap(number_, other->number_);
    std::swap(datetranslate_, other->datetranslate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesResponse_Episode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesResponse_Episode_descriptor_;
  metadata.reflection = SeriesResponse_Episode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SeriesResponse_TVShow::kTitleFieldNumber;
const int SeriesResponse_TVShow::kOriginalTitleFieldNumber;
const int SeriesResponse_TVShow::kSeasonNumberFieldNumber;
const int SeriesResponse_TVShow::kEpisodeNumberFieldNumber;
const int SeriesResponse_TVShow::kIdFieldNumber;
const int SeriesResponse_TVShow::kSnapshotFieldNumber;
const int SeriesResponse_TVShow::kEpisodesFieldNumber;
#endif  // !_MSC_VER

SeriesResponse_TVShow::SeriesResponse_TVShow()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesResponse_TVShow::InitAsDefaultInstance() {
}

SeriesResponse_TVShow::SeriesResponse_TVShow(const SeriesResponse_TVShow& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesResponse_TVShow::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  seasonnumber_ = 0;
  episodenumber_ = 0;
  id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesResponse_TVShow::~SeriesResponse_TVShow() {
  SharedDtor();
}

void SeriesResponse_TVShow::SharedDtor() {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (this != default_instance_) {
  }
}

void SeriesResponse_TVShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesResponse_TVShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesResponse_TVShow_descriptor_;
}

const SeriesResponse_TVShow& SeriesResponse_TVShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesResponse_TVShow* SeriesResponse_TVShow::default_instance_ = NULL;

SeriesResponse_TVShow* SeriesResponse_TVShow::New() const {
  return new SeriesResponse_TVShow;
}

void SeriesResponse_TVShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google_public::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_originaltitle()) {
      if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
        originaltitle_->clear();
      }
    }
    seasonnumber_ = 0;
    episodenumber_ = 0;
    if (has_id()) {
      if (id_ != &::google_public::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_snapshot()) {
      if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshot_->clear();
      }
    }
  }
  episodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesResponse_TVShow::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalTitle;
        break;
      }

      // required string originalTitle = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalTitle:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originaltitle()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originaltitle().data(), this->originaltitle().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seasonNumber;
        break;
      }

      // required int32 seasonNumber = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seasonNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasonnumber_)));
          set_has_seasonnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_episodeNumber;
        break;
      }

      // required int32 episodeNumber = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_episodeNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episodenumber_)));
          set_has_episodenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_id;
        break;
      }

      // required string id = 99;
      case 99: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_snapshot;
        break;
      }

      // required string snapshot = 100;
      case 100: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_episodes;
        break;
      }

      // repeated .LS.SeriesResponse.Episode episodes = 101;
      case 101: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_episodes:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_episodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_episodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesResponse_TVShow::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->originaltitle(), output);
  }

  // required int32 seasonNumber = 3;
  if (has_seasonnumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->seasonnumber(), output);
  }

  // required int32 episodeNumber = 4;
  if (has_episodenumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->episodenumber(), output);
  }

  // required string id = 99;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      99, this->id(), output);
  }

  // required string snapshot = 100;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      100, this->snapshot(), output);
  }

  // repeated .LS.SeriesResponse.Episode episodes = 101;
  for (int i = 0; i < this->episodes_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->episodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesResponse_TVShow::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string originalTitle = 2;
  if (has_originaltitle()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originaltitle().data(), this->originaltitle().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originaltitle(), target);
  }

  // required int32 seasonNumber = 3;
  if (has_seasonnumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seasonnumber(), target);
  }

  // required int32 episodeNumber = 4;
  if (has_episodenumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->episodenumber(), target);
  }

  // required string id = 99;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        99, this->id(), target);
  }

  // required string snapshot = 100;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->snapshot(), target);
  }

  // repeated .LS.SeriesResponse.Episode episodes = 101;
  for (int i = 0; i < this->episodes_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->episodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesResponse_TVShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string originalTitle = 2;
    if (has_originaltitle()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->originaltitle());
    }

    // required int32 seasonNumber = 3;
    if (has_seasonnumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->seasonnumber());
    }

    // required int32 episodeNumber = 4;
    if (has_episodenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->episodenumber());
    }

    // required string id = 99;
    if (has_id()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string snapshot = 100;
    if (has_snapshot()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
    }

  }
  // repeated .LS.SeriesResponse.Episode episodes = 101;
  total_size += 2 * this->episodes_size();
  for (int i = 0; i < this->episodes_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->episodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesResponse_TVShow::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesResponse_TVShow* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesResponse_TVShow*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesResponse_TVShow::MergeFrom(const SeriesResponse_TVShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  episodes_.MergeFrom(from.episodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_originaltitle()) {
      set_originaltitle(from.originaltitle());
    }
    if (from.has_seasonnumber()) {
      set_seasonnumber(from.seasonnumber());
    }
    if (from.has_episodenumber()) {
      set_episodenumber(from.episodenumber());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesResponse_TVShow::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesResponse_TVShow::CopyFrom(const SeriesResponse_TVShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesResponse_TVShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < episodes_size(); i++) {
    if (!this->episodes(i).IsInitialized()) return false;
  }
  return true;
}

void SeriesResponse_TVShow::Swap(SeriesResponse_TVShow* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(originaltitle_, other->originaltitle_);
    std::swap(seasonnumber_, other->seasonnumber_);
    std::swap(episodenumber_, other->episodenumber_);
    std::swap(id_, other->id_);
    std::swap(snapshot_, other->snapshot_);
    episodes_.Swap(&other->episodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesResponse_TVShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesResponse_TVShow_descriptor_;
  metadata.reflection = SeriesResponse_TVShow_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SeriesResponse::kShowsFieldNumber;
#endif  // !_MSC_VER

SeriesResponse::SeriesResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SeriesResponse::InitAsDefaultInstance() {
}

SeriesResponse::SeriesResponse(const SeriesResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesResponse::~SeriesResponse() {
  SharedDtor();
}

void SeriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SeriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesResponse_descriptor_;
}

const SeriesResponse& SeriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SeriesResponse* SeriesResponse::default_instance_ = NULL;

SeriesResponse* SeriesResponse::New() const {
  return new SeriesResponse;
}

void SeriesResponse::Clear() {
  shows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LS.SeriesResponse.TVShow shows = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shows:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shows;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // repeated .LS.SeriesResponse.TVShow shows = 1;
  for (int i = 0; i < this->shows_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SeriesResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // repeated .LS.SeriesResponse.TVShow shows = 1;
  for (int i = 0; i < this->shows_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .LS.SeriesResponse.TVShow shows = 1;
  total_size += 1 * this->shows_size();
  for (int i = 0; i < this->shows_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SeriesResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesResponse::MergeFrom(const SeriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  shows_.MergeFrom(from.shows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesResponse::CopyFrom(const SeriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesResponse::IsInitialized() const {

  for (int i = 0; i < shows_size(); i++) {
    if (!this->shows(i).IsInitialized()) return false;
  }
  return true;
}

void SeriesResponse::Swap(SeriesResponse* other) {
  if (other != this) {
    shows_.Swap(&other->shows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SeriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SeriesResponse_descriptor_;
  metadata.reflection = SeriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtworkRequest::kIdShowFieldNumber;
const int ArtworkRequest::kSeasonNumberFieldNumber;
const int ArtworkRequest::kThumbnailFieldNumber;
const int ArtworkRequest::kSnapshotFieldNumber;
#endif  // !_MSC_VER

ArtworkRequest::ArtworkRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void ArtworkRequest::InitAsDefaultInstance() {
}

ArtworkRequest::ArtworkRequest(const ArtworkRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtworkRequest::SharedCtor() {
  _cached_size_ = 0;
  idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  seasonnumber_ = 0;
  thumbnail_ = false;
  snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtworkRequest::~ArtworkRequest() {
  SharedDtor();
}

void ArtworkRequest::SharedDtor() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (this != default_instance_) {
  }
}

void ArtworkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ArtworkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtworkRequest_descriptor_;
}

const ArtworkRequest& ArtworkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

ArtworkRequest* ArtworkRequest::default_instance_ = NULL;

ArtworkRequest* ArtworkRequest::New() const {
  return new ArtworkRequest;
}

void ArtworkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idshow()) {
      if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
        idshow_->clear();
      }
    }
    seasonnumber_ = 0;
    thumbnail_ = false;
    if (has_snapshot()) {
      if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtworkRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idShow = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idshow()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idshow().data(), this->idshow().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seasonNumber;
        break;
      }

      // required int32 seasonNumber = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seasonNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seasonnumber_)));
          set_has_seasonnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_thumbnail;
        break;
      }

      // required bool thumbnail = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thumbnail:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &thumbnail_)));
          set_has_thumbnail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_snapshot;
        break;
      }

      // required string snapshot = 100;
      case 100: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtworkRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idshow(), output);
  }

  // required int32 seasonNumber = 2;
  if (has_seasonnumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->seasonnumber(), output);
  }

  // required bool thumbnail = 3;
  if (has_thumbnail()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->thumbnail(), output);
  }

  // required string snapshot = 100;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      100, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* ArtworkRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idshow(), target);
  }

  // required int32 seasonNumber = 2;
  if (has_seasonnumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seasonnumber(), target);
  }

  // required bool thumbnail = 3;
  if (has_thumbnail()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->thumbnail(), target);
  }

  // required string snapshot = 100;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtworkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idShow = 1;
    if (has_idshow()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idshow());
    }

    // required int32 seasonNumber = 2;
    if (has_seasonnumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->seasonnumber());
    }

    // required bool thumbnail = 3;
    if (has_thumbnail()) {
      total_size += 1 + 1;
    }

    // required string snapshot = 100;
    if (has_snapshot()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtworkRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtworkRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ArtworkRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtworkRequest::MergeFrom(const ArtworkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idshow()) {
      set_idshow(from.idshow());
    }
    if (from.has_seasonnumber()) {
      set_seasonnumber(from.seasonnumber());
    }
    if (from.has_thumbnail()) {
      set_thumbnail(from.thumbnail());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtworkRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtworkRequest::CopyFrom(const ArtworkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtworkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ArtworkRequest::Swap(ArtworkRequest* other) {
  if (other != this) {
    std::swap(idshow_, other->idshow_);
    std::swap(seasonnumber_, other->seasonnumber_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ArtworkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ArtworkRequest_descriptor_;
  metadata.reflection = ArtworkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArtworkResponse::ArtworkResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void ArtworkResponse::InitAsDefaultInstance() {
}

ArtworkResponse::ArtworkResponse(const ArtworkResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtworkResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtworkResponse::~ArtworkResponse() {
  SharedDtor();
}

void ArtworkResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtworkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ArtworkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtworkResponse_descriptor_;
}

const ArtworkResponse& ArtworkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

ArtworkResponse* ArtworkResponse::default_instance_ = NULL;

ArtworkResponse* ArtworkResponse::New() const {
  return new ArtworkResponse;
}

void ArtworkResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtworkResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ArtworkResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* ArtworkResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtworkResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtworkResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtworkResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ArtworkResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtworkResponse::MergeFrom(const ArtworkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtworkResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtworkResponse::CopyFrom(const ArtworkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtworkResponse::IsInitialized() const {

  return true;
}

void ArtworkResponse::Swap(ArtworkResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ArtworkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ArtworkResponse_descriptor_;
  metadata.reflection = ArtworkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSubscriptionRequest::kIdClientFieldNumber;
const int SetSubscriptionRequest::kTokenFieldNumber;
const int SetSubscriptionRequest::kSubscriptionsFieldNumber;
const int SetSubscriptionRequest::kFlagUnsubscribeFieldNumber;
#endif  // !_MSC_VER

SetSubscriptionRequest::SetSubscriptionRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SetSubscriptionRequest::InitAsDefaultInstance() {
}

SetSubscriptionRequest::SetSubscriptionRequest(const SetSubscriptionRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSubscriptionRequest::SharedCtor() {
  _cached_size_ = 0;
  idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  flagunsubscribe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSubscriptionRequest::~SetSubscriptionRequest() {
  SharedDtor();
}

void SetSubscriptionRequest::SharedDtor() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void SetSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SetSubscriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSubscriptionRequest_descriptor_;
}

const SetSubscriptionRequest& SetSubscriptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SetSubscriptionRequest* SetSubscriptionRequest::default_instance_ = NULL;

SetSubscriptionRequest* SetSubscriptionRequest::New() const {
  return new SetSubscriptionRequest;
}

void SetSubscriptionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idclient()) {
      if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
        idclient_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google_public::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    flagunsubscribe_ = false;
  }
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSubscriptionRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idClient = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idclient()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idclient().data(), this->idclient().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subscriptions;
        break;
      }

      // repeated .LS.SubscriptionRecord subscriptions = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subscriptions;
        if (input->ExpectTag(32)) goto parse_flagUnsubscribe;
        break;
      }

      // required bool flagUnsubscribe = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagUnsubscribe:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flagunsubscribe_)));
          set_has_flagunsubscribe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSubscriptionRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idclient(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // repeated .LS.SubscriptionRecord subscriptions = 3;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subscriptions(i), output);
  }

  // required bool flagUnsubscribe = 4;
  if (has_flagunsubscribe()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->flagunsubscribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SetSubscriptionRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idclient(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // repeated .LS.SubscriptionRecord subscriptions = 3;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subscriptions(i), target);
  }

  // required bool flagUnsubscribe = 4;
  if (has_flagunsubscribe()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flagunsubscribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSubscriptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idClient = 1;
    if (has_idclient()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idclient());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required bool flagUnsubscribe = 4;
    if (has_flagunsubscribe()) {
      total_size += 1 + 1;
    }

  }
  // repeated .LS.SubscriptionRecord subscriptions = 3;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSubscriptionRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSubscriptionRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SetSubscriptionRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSubscriptionRequest::MergeFrom(const SetSubscriptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idclient()) {
      set_idclient(from.idclient());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_flagunsubscribe()) {
      set_flagunsubscribe(from.flagunsubscribe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSubscriptionRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSubscriptionRequest::CopyFrom(const SetSubscriptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSubscriptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < subscriptions_size(); i++) {
    if (!this->subscriptions(i).IsInitialized()) return false;
  }
  return true;
}

void SetSubscriptionRequest::Swap(SetSubscriptionRequest* other) {
  if (other != this) {
    std::swap(idclient_, other->idclient_);
    std::swap(token_, other->token_);
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(flagunsubscribe_, other->flagunsubscribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SetSubscriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SetSubscriptionRequest_descriptor_;
  metadata.reflection = SetSubscriptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSubscriptionResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetSubscriptionResponse::SetSubscriptionResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SetSubscriptionResponse::InitAsDefaultInstance() {
}

SetSubscriptionResponse::SetSubscriptionResponse(const SetSubscriptionResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSubscriptionResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSubscriptionResponse::~SetSubscriptionResponse() {
  SharedDtor();
}

void SetSubscriptionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetSubscriptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SetSubscriptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSubscriptionResponse_descriptor_;
}

const SetSubscriptionResponse& SetSubscriptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SetSubscriptionResponse* SetSubscriptionResponse::default_instance_ = NULL;

SetSubscriptionResponse* SetSubscriptionResponse::New() const {
  return new SetSubscriptionResponse;
}

void SetSubscriptionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSubscriptionResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSubscriptionResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SetSubscriptionResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSubscriptionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSubscriptionResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSubscriptionResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SetSubscriptionResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSubscriptionResponse::MergeFrom(const SetSubscriptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSubscriptionResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSubscriptionResponse::CopyFrom(const SetSubscriptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSubscriptionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetSubscriptionResponse::Swap(SetSubscriptionResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SetSubscriptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SetSubscriptionResponse_descriptor_;
  metadata.reflection = SetSubscriptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriptionRequest::kIdClientFieldNumber;
#endif  // !_MSC_VER

GetSubscriptionRequest::GetSubscriptionRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetSubscriptionRequest::InitAsDefaultInstance() {
}

GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscriptionRequest::SharedCtor() {
  _cached_size_ = 0;
  idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  SharedDtor();
}

void GetSubscriptionRequest::SharedDtor() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (this != default_instance_) {
  }
}

void GetSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetSubscriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionRequest_descriptor_;
}

const GetSubscriptionRequest& GetSubscriptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetSubscriptionRequest* GetSubscriptionRequest::default_instance_ = NULL;

GetSubscriptionRequest* GetSubscriptionRequest::New() const {
  return new GetSubscriptionRequest;
}

void GetSubscriptionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idclient()) {
      if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
        idclient_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriptionRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idClient = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idclient()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idclient().data(), this->idclient().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscriptionRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idclient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetSubscriptionRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idclient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscriptionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idClient = 1;
    if (has_idclient()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idclient());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriptionRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetSubscriptionRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idclient()) {
      set_idclient(from.idclient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriptionRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSubscriptionRequest::Swap(GetSubscriptionRequest* other) {
  if (other != this) {
    std::swap(idclient_, other->idclient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetSubscriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionRequest_descriptor_;
  metadata.reflection = GetSubscriptionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriptionResponse::kSubscriptionsFieldNumber;
#endif  // !_MSC_VER

GetSubscriptionResponse::GetSubscriptionResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetSubscriptionResponse::InitAsDefaultInstance() {
}

GetSubscriptionResponse::GetSubscriptionResponse(const GetSubscriptionResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscriptionResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriptionResponse::~GetSubscriptionResponse() {
  SharedDtor();
}

void GetSubscriptionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSubscriptionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetSubscriptionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionResponse_descriptor_;
}

const GetSubscriptionResponse& GetSubscriptionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetSubscriptionResponse* GetSubscriptionResponse::default_instance_ = NULL;

GetSubscriptionResponse* GetSubscriptionResponse::New() const {
  return new GetSubscriptionResponse;
}

void GetSubscriptionResponse::Clear() {
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriptionResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LS.SubscriptionRecord subscriptions = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_subscriptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscriptionResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // repeated .LS.SubscriptionRecord subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriptions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetSubscriptionResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // repeated .LS.SubscriptionRecord subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subscriptions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscriptionResponse::ByteSize() const {
  int total_size = 0;

  // repeated .LS.SubscriptionRecord subscriptions = 1;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriptionResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetSubscriptionResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriptionResponse::MergeFrom(const GetSubscriptionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriptionResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionResponse::CopyFrom(const GetSubscriptionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionResponse::IsInitialized() const {

  for (int i = 0; i < subscriptions_size(); i++) {
    if (!this->subscriptions(i).IsInitialized()) return false;
  }
  return true;
}

void GetSubscriptionResponse::Swap(GetSubscriptionResponse* other) {
  if (other != this) {
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetSubscriptionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionResponse_descriptor_;
  metadata.reflection = GetSubscriptionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUnwatchedSeriesRequest::kIdClientFieldNumber;
#endif  // !_MSC_VER

GetUnwatchedSeriesRequest::GetUnwatchedSeriesRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetUnwatchedSeriesRequest::InitAsDefaultInstance() {
}

GetUnwatchedSeriesRequest::GetUnwatchedSeriesRequest(const GetUnwatchedSeriesRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnwatchedSeriesRequest::SharedCtor() {
  _cached_size_ = 0;
  idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnwatchedSeriesRequest::~GetUnwatchedSeriesRequest() {
  SharedDtor();
}

void GetUnwatchedSeriesRequest::SharedDtor() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (this != default_instance_) {
  }
}

void GetUnwatchedSeriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetUnwatchedSeriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnwatchedSeriesRequest_descriptor_;
}

const GetUnwatchedSeriesRequest& GetUnwatchedSeriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetUnwatchedSeriesRequest* GetUnwatchedSeriesRequest::default_instance_ = NULL;

GetUnwatchedSeriesRequest* GetUnwatchedSeriesRequest::New() const {
  return new GetUnwatchedSeriesRequest;
}

void GetUnwatchedSeriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idclient()) {
      if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
        idclient_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnwatchedSeriesRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idClient = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idclient()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idclient().data(), this->idclient().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUnwatchedSeriesRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idclient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetUnwatchedSeriesRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idclient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnwatchedSeriesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idClient = 1;
    if (has_idclient()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idclient());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnwatchedSeriesRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnwatchedSeriesRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetUnwatchedSeriesRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnwatchedSeriesRequest::MergeFrom(const GetUnwatchedSeriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idclient()) {
      set_idclient(from.idclient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnwatchedSeriesRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnwatchedSeriesRequest::CopyFrom(const GetUnwatchedSeriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnwatchedSeriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUnwatchedSeriesRequest::Swap(GetUnwatchedSeriesRequest* other) {
  if (other != this) {
    std::swap(idclient_, other->idclient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetUnwatchedSeriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetUnwatchedSeriesRequest_descriptor_;
  metadata.reflection = GetUnwatchedSeriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUnwatchedSeriesResponse_Episode::kIdShowFieldNumber;
const int GetUnwatchedSeriesResponse_Episode::kNumberSeasonFieldNumber;
const int GetUnwatchedSeriesResponse_Episode::kNumberEpisodeFieldNumber;
#endif  // !_MSC_VER

GetUnwatchedSeriesResponse_Episode::GetUnwatchedSeriesResponse_Episode()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetUnwatchedSeriesResponse_Episode::InitAsDefaultInstance() {
}

GetUnwatchedSeriesResponse_Episode::GetUnwatchedSeriesResponse_Episode(const GetUnwatchedSeriesResponse_Episode& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnwatchedSeriesResponse_Episode::SharedCtor() {
  _cached_size_ = 0;
  idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  numberseason_ = 0;
  numberepisode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnwatchedSeriesResponse_Episode::~GetUnwatchedSeriesResponse_Episode() {
  SharedDtor();
}

void GetUnwatchedSeriesResponse_Episode::SharedDtor() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (this != default_instance_) {
  }
}

void GetUnwatchedSeriesResponse_Episode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetUnwatchedSeriesResponse_Episode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnwatchedSeriesResponse_Episode_descriptor_;
}

const GetUnwatchedSeriesResponse_Episode& GetUnwatchedSeriesResponse_Episode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetUnwatchedSeriesResponse_Episode* GetUnwatchedSeriesResponse_Episode::default_instance_ = NULL;

GetUnwatchedSeriesResponse_Episode* GetUnwatchedSeriesResponse_Episode::New() const {
  return new GetUnwatchedSeriesResponse_Episode;
}

void GetUnwatchedSeriesResponse_Episode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idshow()) {
      if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
        idshow_->clear();
      }
    }
    numberseason_ = 0;
    numberepisode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnwatchedSeriesResponse_Episode::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idShow = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idshow()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idshow().data(), this->idshow().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numberSeason;
        break;
      }

      // required int32 numberSeason = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberSeason:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberseason_)));
          set_has_numberseason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numberEpisode;
        break;
      }

      // required int32 numberEpisode = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberEpisode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberepisode_)));
          set_has_numberepisode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUnwatchedSeriesResponse_Episode::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idshow(), output);
  }

  // required int32 numberSeason = 2;
  if (has_numberseason()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->numberseason(), output);
  }

  // required int32 numberEpisode = 3;
  if (has_numberepisode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberepisode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetUnwatchedSeriesResponse_Episode::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idshow(), target);
  }

  // required int32 numberSeason = 2;
  if (has_numberseason()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numberseason(), target);
  }

  // required int32 numberEpisode = 3;
  if (has_numberepisode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberepisode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnwatchedSeriesResponse_Episode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idShow = 1;
    if (has_idshow()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idshow());
    }

    // required int32 numberSeason = 2;
    if (has_numberseason()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->numberseason());
    }

    // required int32 numberEpisode = 3;
    if (has_numberepisode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->numberepisode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnwatchedSeriesResponse_Episode::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnwatchedSeriesResponse_Episode* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetUnwatchedSeriesResponse_Episode*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnwatchedSeriesResponse_Episode::MergeFrom(const GetUnwatchedSeriesResponse_Episode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idshow()) {
      set_idshow(from.idshow());
    }
    if (from.has_numberseason()) {
      set_numberseason(from.numberseason());
    }
    if (from.has_numberepisode()) {
      set_numberepisode(from.numberepisode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnwatchedSeriesResponse_Episode::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnwatchedSeriesResponse_Episode::CopyFrom(const GetUnwatchedSeriesResponse_Episode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnwatchedSeriesResponse_Episode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetUnwatchedSeriesResponse_Episode::Swap(GetUnwatchedSeriesResponse_Episode* other) {
  if (other != this) {
    std::swap(idshow_, other->idshow_);
    std::swap(numberseason_, other->numberseason_);
    std::swap(numberepisode_, other->numberepisode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetUnwatchedSeriesResponse_Episode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetUnwatchedSeriesResponse_Episode_descriptor_;
  metadata.reflection = GetUnwatchedSeriesResponse_Episode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetUnwatchedSeriesResponse::kEpisodesFieldNumber;
#endif  // !_MSC_VER

GetUnwatchedSeriesResponse::GetUnwatchedSeriesResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetUnwatchedSeriesResponse::InitAsDefaultInstance() {
}

GetUnwatchedSeriesResponse::GetUnwatchedSeriesResponse(const GetUnwatchedSeriesResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUnwatchedSeriesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUnwatchedSeriesResponse::~GetUnwatchedSeriesResponse() {
  SharedDtor();
}

void GetUnwatchedSeriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUnwatchedSeriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetUnwatchedSeriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUnwatchedSeriesResponse_descriptor_;
}

const GetUnwatchedSeriesResponse& GetUnwatchedSeriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetUnwatchedSeriesResponse* GetUnwatchedSeriesResponse::default_instance_ = NULL;

GetUnwatchedSeriesResponse* GetUnwatchedSeriesResponse::New() const {
  return new GetUnwatchedSeriesResponse;
}

void GetUnwatchedSeriesResponse::Clear() {
  episodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUnwatchedSeriesResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LS.GetUnwatchedSeriesResponse.Episode episodes = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_episodes:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_episodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_episodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUnwatchedSeriesResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // repeated .LS.GetUnwatchedSeriesResponse.Episode episodes = 1;
  for (int i = 0; i < this->episodes_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->episodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetUnwatchedSeriesResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // repeated .LS.GetUnwatchedSeriesResponse.Episode episodes = 1;
  for (int i = 0; i < this->episodes_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->episodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUnwatchedSeriesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .LS.GetUnwatchedSeriesResponse.Episode episodes = 1;
  total_size += 1 * this->episodes_size();
  for (int i = 0; i < this->episodes_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->episodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUnwatchedSeriesResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUnwatchedSeriesResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetUnwatchedSeriesResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUnwatchedSeriesResponse::MergeFrom(const GetUnwatchedSeriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  episodes_.MergeFrom(from.episodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUnwatchedSeriesResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUnwatchedSeriesResponse::CopyFrom(const GetUnwatchedSeriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnwatchedSeriesResponse::IsInitialized() const {

  for (int i = 0; i < episodes_size(); i++) {
    if (!this->episodes(i).IsInitialized()) return false;
  }
  return true;
}

void GetUnwatchedSeriesResponse::Swap(GetUnwatchedSeriesResponse* other) {
  if (other != this) {
    episodes_.Swap(&other->episodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetUnwatchedSeriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetUnwatchedSeriesResponse_descriptor_;
  metadata.reflection = GetUnwatchedSeriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUnwatchedSeriesRequest_Episode::kIdShowFieldNumber;
const int SetUnwatchedSeriesRequest_Episode::kNumberSeasonFieldNumber;
const int SetUnwatchedSeriesRequest_Episode::kNumberEpisodeFieldNumber;
#endif  // !_MSC_VER

SetUnwatchedSeriesRequest_Episode::SetUnwatchedSeriesRequest_Episode()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SetUnwatchedSeriesRequest_Episode::InitAsDefaultInstance() {
}

SetUnwatchedSeriesRequest_Episode::SetUnwatchedSeriesRequest_Episode(const SetUnwatchedSeriesRequest_Episode& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUnwatchedSeriesRequest_Episode::SharedCtor() {
  _cached_size_ = 0;
  idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  numberseason_ = 0;
  numberepisode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUnwatchedSeriesRequest_Episode::~SetUnwatchedSeriesRequest_Episode() {
  SharedDtor();
}

void SetUnwatchedSeriesRequest_Episode::SharedDtor() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (this != default_instance_) {
  }
}

void SetUnwatchedSeriesRequest_Episode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SetUnwatchedSeriesRequest_Episode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUnwatchedSeriesRequest_Episode_descriptor_;
}

const SetUnwatchedSeriesRequest_Episode& SetUnwatchedSeriesRequest_Episode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SetUnwatchedSeriesRequest_Episode* SetUnwatchedSeriesRequest_Episode::default_instance_ = NULL;

SetUnwatchedSeriesRequest_Episode* SetUnwatchedSeriesRequest_Episode::New() const {
  return new SetUnwatchedSeriesRequest_Episode;
}

void SetUnwatchedSeriesRequest_Episode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idshow()) {
      if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
        idshow_->clear();
      }
    }
    numberseason_ = 0;
    numberepisode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUnwatchedSeriesRequest_Episode::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idShow = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idshow()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idshow().data(), this->idshow().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numberSeason;
        break;
      }

      // required int32 numberSeason = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberSeason:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberseason_)));
          set_has_numberseason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numberEpisode;
        break;
      }

      // required int32 numberEpisode = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberEpisode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberepisode_)));
          set_has_numberepisode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUnwatchedSeriesRequest_Episode::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idshow(), output);
  }

  // required int32 numberSeason = 2;
  if (has_numberseason()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->numberseason(), output);
  }

  // required int32 numberEpisode = 3;
  if (has_numberepisode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->numberepisode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SetUnwatchedSeriesRequest_Episode::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idshow(), target);
  }

  // required int32 numberSeason = 2;
  if (has_numberseason()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numberseason(), target);
  }

  // required int32 numberEpisode = 3;
  if (has_numberepisode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numberepisode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUnwatchedSeriesRequest_Episode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idShow = 1;
    if (has_idshow()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idshow());
    }

    // required int32 numberSeason = 2;
    if (has_numberseason()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->numberseason());
    }

    // required int32 numberEpisode = 3;
    if (has_numberepisode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->numberepisode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUnwatchedSeriesRequest_Episode::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUnwatchedSeriesRequest_Episode* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SetUnwatchedSeriesRequest_Episode*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUnwatchedSeriesRequest_Episode::MergeFrom(const SetUnwatchedSeriesRequest_Episode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idshow()) {
      set_idshow(from.idshow());
    }
    if (from.has_numberseason()) {
      set_numberseason(from.numberseason());
    }
    if (from.has_numberepisode()) {
      set_numberepisode(from.numberepisode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUnwatchedSeriesRequest_Episode::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUnwatchedSeriesRequest_Episode::CopyFrom(const SetUnwatchedSeriesRequest_Episode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUnwatchedSeriesRequest_Episode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetUnwatchedSeriesRequest_Episode::Swap(SetUnwatchedSeriesRequest_Episode* other) {
  if (other != this) {
    std::swap(idshow_, other->idshow_);
    std::swap(numberseason_, other->numberseason_);
    std::swap(numberepisode_, other->numberepisode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SetUnwatchedSeriesRequest_Episode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SetUnwatchedSeriesRequest_Episode_descriptor_;
  metadata.reflection = SetUnwatchedSeriesRequest_Episode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SetUnwatchedSeriesRequest::kIdClientFieldNumber;
const int SetUnwatchedSeriesRequest::kEpisodesFieldNumber;
const int SetUnwatchedSeriesRequest::kFlagRemoveFieldNumber;
#endif  // !_MSC_VER

SetUnwatchedSeriesRequest::SetUnwatchedSeriesRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SetUnwatchedSeriesRequest::InitAsDefaultInstance() {
}

SetUnwatchedSeriesRequest::SetUnwatchedSeriesRequest(const SetUnwatchedSeriesRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUnwatchedSeriesRequest::SharedCtor() {
  _cached_size_ = 0;
  idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  flagremove_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUnwatchedSeriesRequest::~SetUnwatchedSeriesRequest() {
  SharedDtor();
}

void SetUnwatchedSeriesRequest::SharedDtor() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (this != default_instance_) {
  }
}

void SetUnwatchedSeriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SetUnwatchedSeriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUnwatchedSeriesRequest_descriptor_;
}

const SetUnwatchedSeriesRequest& SetUnwatchedSeriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SetUnwatchedSeriesRequest* SetUnwatchedSeriesRequest::default_instance_ = NULL;

SetUnwatchedSeriesRequest* SetUnwatchedSeriesRequest::New() const {
  return new SetUnwatchedSeriesRequest;
}

void SetUnwatchedSeriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idclient()) {
      if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
        idclient_->clear();
      }
    }
    flagremove_ = false;
  }
  episodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUnwatchedSeriesRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idClient = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idclient()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idclient().data(), this->idclient().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_episodes;
        break;
      }

      // repeated .LS.SetUnwatchedSeriesRequest.Episode episodes = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_episodes:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_episodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_episodes;
        if (input->ExpectTag(24)) goto parse_flagRemove;
        break;
      }

      // required bool flagRemove = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagRemove:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flagremove_)));
          set_has_flagremove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUnwatchedSeriesRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idclient(), output);
  }

  // repeated .LS.SetUnwatchedSeriesRequest.Episode episodes = 2;
  for (int i = 0; i < this->episodes_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->episodes(i), output);
  }

  // required bool flagRemove = 3;
  if (has_flagremove()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->flagremove(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SetUnwatchedSeriesRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idClient = 1;
  if (has_idclient()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idclient().data(), this->idclient().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idclient(), target);
  }

  // repeated .LS.SetUnwatchedSeriesRequest.Episode episodes = 2;
  for (int i = 0; i < this->episodes_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->episodes(i), target);
  }

  // required bool flagRemove = 3;
  if (has_flagremove()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flagremove(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUnwatchedSeriesRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idClient = 1;
    if (has_idclient()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idclient());
    }

    // required bool flagRemove = 3;
    if (has_flagremove()) {
      total_size += 1 + 1;
    }

  }
  // repeated .LS.SetUnwatchedSeriesRequest.Episode episodes = 2;
  total_size += 1 * this->episodes_size();
  for (int i = 0; i < this->episodes_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->episodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUnwatchedSeriesRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUnwatchedSeriesRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SetUnwatchedSeriesRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUnwatchedSeriesRequest::MergeFrom(const SetUnwatchedSeriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  episodes_.MergeFrom(from.episodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idclient()) {
      set_idclient(from.idclient());
    }
    if (from.has_flagremove()) {
      set_flagremove(from.flagremove());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUnwatchedSeriesRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUnwatchedSeriesRequest::CopyFrom(const SetUnwatchedSeriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUnwatchedSeriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < episodes_size(); i++) {
    if (!this->episodes(i).IsInitialized()) return false;
  }
  return true;
}

void SetUnwatchedSeriesRequest::Swap(SetUnwatchedSeriesRequest* other) {
  if (other != this) {
    std::swap(idclient_, other->idclient_);
    episodes_.Swap(&other->episodes_);
    std::swap(flagremove_, other->flagremove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SetUnwatchedSeriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SetUnwatchedSeriesRequest_descriptor_;
  metadata.reflection = SetUnwatchedSeriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUnwatchedSeriesResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetUnwatchedSeriesResponse::SetUnwatchedSeriesResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void SetUnwatchedSeriesResponse::InitAsDefaultInstance() {
}

SetUnwatchedSeriesResponse::SetUnwatchedSeriesResponse(const SetUnwatchedSeriesResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUnwatchedSeriesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUnwatchedSeriesResponse::~SetUnwatchedSeriesResponse() {
  SharedDtor();
}

void SetUnwatchedSeriesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetUnwatchedSeriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SetUnwatchedSeriesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUnwatchedSeriesResponse_descriptor_;
}

const SetUnwatchedSeriesResponse& SetUnwatchedSeriesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

SetUnwatchedSeriesResponse* SetUnwatchedSeriesResponse::default_instance_ = NULL;

SetUnwatchedSeriesResponse* SetUnwatchedSeriesResponse::New() const {
  return new SetUnwatchedSeriesResponse;
}

void SetUnwatchedSeriesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUnwatchedSeriesResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUnwatchedSeriesResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* SetUnwatchedSeriesResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUnwatchedSeriesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUnwatchedSeriesResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUnwatchedSeriesResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SetUnwatchedSeriesResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUnwatchedSeriesResponse::MergeFrom(const SetUnwatchedSeriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUnwatchedSeriesResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUnwatchedSeriesResponse::CopyFrom(const SetUnwatchedSeriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUnwatchedSeriesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetUnwatchedSeriesResponse::Swap(SetUnwatchedSeriesResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SetUnwatchedSeriesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SetUnwatchedSeriesResponse_descriptor_;
  metadata.reflection = SetUnwatchedSeriesResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSnapshotsRequest::GetSnapshotsRequest()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetSnapshotsRequest::InitAsDefaultInstance() {
}

GetSnapshotsRequest::GetSnapshotsRequest(const GetSnapshotsRequest& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshotsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshotsRequest::~GetSnapshotsRequest() {
  SharedDtor();
}

void GetSnapshotsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSnapshotsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetSnapshotsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshotsRequest_descriptor_;
}

const GetSnapshotsRequest& GetSnapshotsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetSnapshotsRequest* GetSnapshotsRequest::default_instance_ = NULL;

GetSnapshotsRequest* GetSnapshotsRequest::New() const {
  return new GetSnapshotsRequest;
}

void GetSnapshotsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshotsRequest::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSnapshotsRequest::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetSnapshotsRequest::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshotsRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshotsRequest::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshotsRequest* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetSnapshotsRequest*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshotsRequest::MergeFrom(const GetSnapshotsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshotsRequest::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotsRequest::CopyFrom(const GetSnapshotsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotsRequest::IsInitialized() const {

  return true;
}

void GetSnapshotsRequest::Swap(GetSnapshotsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetSnapshotsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshotsRequest_descriptor_;
  metadata.reflection = GetSnapshotsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSnapshotsResponse_SnapshotArtwork::kIdShowFieldNumber;
const int GetSnapshotsResponse_SnapshotArtwork::kNumberSeasonFieldNumber;
const int GetSnapshotsResponse_SnapshotArtwork::kSnapshotFieldNumber;
#endif  // !_MSC_VER

GetSnapshotsResponse_SnapshotArtwork::GetSnapshotsResponse_SnapshotArtwork()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetSnapshotsResponse_SnapshotArtwork::InitAsDefaultInstance() {
}

GetSnapshotsResponse_SnapshotArtwork::GetSnapshotsResponse_SnapshotArtwork(const GetSnapshotsResponse_SnapshotArtwork& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshotsResponse_SnapshotArtwork::SharedCtor() {
  _cached_size_ = 0;
  idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  numberseason_ = 0;
  snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshotsResponse_SnapshotArtwork::~GetSnapshotsResponse_SnapshotArtwork() {
  SharedDtor();
}

void GetSnapshotsResponse_SnapshotArtwork::SharedDtor() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (this != default_instance_) {
  }
}

void GetSnapshotsResponse_SnapshotArtwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetSnapshotsResponse_SnapshotArtwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshotsResponse_SnapshotArtwork_descriptor_;
}

const GetSnapshotsResponse_SnapshotArtwork& GetSnapshotsResponse_SnapshotArtwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetSnapshotsResponse_SnapshotArtwork* GetSnapshotsResponse_SnapshotArtwork::default_instance_ = NULL;

GetSnapshotsResponse_SnapshotArtwork* GetSnapshotsResponse_SnapshotArtwork::New() const {
  return new GetSnapshotsResponse_SnapshotArtwork;
}

void GetSnapshotsResponse_SnapshotArtwork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_idshow()) {
      if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
        idshow_->clear();
      }
    }
    numberseason_ = 0;
    if (has_snapshot()) {
      if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshotsResponse_SnapshotArtwork::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string idShow = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idshow()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idshow().data(), this->idshow().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numberSeason;
        break;
      }

      // required int32 numberSeason = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberSeason:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberseason_)));
          set_has_numberseason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_snapshot;
        break;
      }

      // required string snapshot = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshot:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshot().data(), this->snapshot().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSnapshotsResponse_SnapshotArtwork::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->idshow(), output);
  }

  // required int32 numberSeason = 2;
  if (has_numberseason()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->numberseason(), output);
  }

  // required string snapshot = 3;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->snapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetSnapshotsResponse_SnapshotArtwork::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string idShow = 1;
  if (has_idshow()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idshow().data(), this->idshow().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->idshow(), target);
  }

  // required int32 numberSeason = 2;
  if (has_numberseason()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numberseason(), target);
  }

  // required string snapshot = 3;
  if (has_snapshot()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshot().data(), this->snapshot().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshotsResponse_SnapshotArtwork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string idShow = 1;
    if (has_idshow()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->idshow());
    }

    // required int32 numberSeason = 2;
    if (has_numberseason()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->numberseason());
    }

    // required string snapshot = 3;
    if (has_snapshot()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshotsResponse_SnapshotArtwork::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshotsResponse_SnapshotArtwork* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetSnapshotsResponse_SnapshotArtwork*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshotsResponse_SnapshotArtwork::MergeFrom(const GetSnapshotsResponse_SnapshotArtwork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idshow()) {
      set_idshow(from.idshow());
    }
    if (from.has_numberseason()) {
      set_numberseason(from.numberseason());
    }
    if (from.has_snapshot()) {
      set_snapshot(from.snapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshotsResponse_SnapshotArtwork::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotsResponse_SnapshotArtwork::CopyFrom(const GetSnapshotsResponse_SnapshotArtwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotsResponse_SnapshotArtwork::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetSnapshotsResponse_SnapshotArtwork::Swap(GetSnapshotsResponse_SnapshotArtwork* other) {
  if (other != this) {
    std::swap(idshow_, other->idshow_);
    std::swap(numberseason_, other->numberseason_);
    std::swap(snapshot_, other->snapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetSnapshotsResponse_SnapshotArtwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshotsResponse_SnapshotArtwork_descriptor_;
  metadata.reflection = GetSnapshotsResponse_SnapshotArtwork_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetSnapshotsResponse::kSnapshotSeriesFieldNumber;
const int GetSnapshotsResponse::kSnapshotsArtworkFieldNumber;
#endif  // !_MSC_VER

GetSnapshotsResponse::GetSnapshotsResponse()
  : ::google_public::protobuf::Message() {
  SharedCtor();
}

void GetSnapshotsResponse::InitAsDefaultInstance() {
}

GetSnapshotsResponse::GetSnapshotsResponse(const GetSnapshotsResponse& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshotsResponse::SharedCtor() {
  _cached_size_ = 0;
  snapshotseries_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshotsResponse::~GetSnapshotsResponse() {
  SharedDtor();
}

void GetSnapshotsResponse::SharedDtor() {
  if (snapshotseries_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshotseries_;
  }
  if (this != default_instance_) {
  }
}

void GetSnapshotsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetSnapshotsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshotsResponse_descriptor_;
}

const GetSnapshotsResponse& GetSnapshotsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LostSeriesProtocol_2eproto();
  return *default_instance_;
}

GetSnapshotsResponse* GetSnapshotsResponse::default_instance_ = NULL;

GetSnapshotsResponse* GetSnapshotsResponse::New() const {
  return new GetSnapshotsResponse;
}

void GetSnapshotsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotseries()) {
      if (snapshotseries_ != &::google_public::protobuf::internal::kEmptyString) {
        snapshotseries_->clear();
      }
    }
  }
  snapshotsartwork_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshotsResponse::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotSeries = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotseries()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotseries().data(), this->snapshotseries().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshotsArtwork;
        break;
      }

      // repeated .LS.GetSnapshotsResponse.SnapshotArtwork snapshotsArtwork = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshotsArtwork:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_snapshotsartwork()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshotsArtwork;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSnapshotsResponse::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotSeries = 1;
  if (has_snapshotseries()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotseries().data(), this->snapshotseries().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotseries(), output);
  }

  // repeated .LS.GetSnapshotsResponse.SnapshotArtwork snapshotsArtwork = 2;
  for (int i = 0; i < this->snapshotsartwork_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->snapshotsartwork(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google_public::protobuf::uint8* GetSnapshotsResponse::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // required string snapshotSeries = 1;
  if (has_snapshotseries()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotseries().data(), this->snapshotseries().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotseries(), target);
  }

  // repeated .LS.GetSnapshotsResponse.SnapshotArtwork snapshotsArtwork = 2;
  for (int i = 0; i < this->snapshotsartwork_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->snapshotsartwork(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshotsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotSeries = 1;
    if (has_snapshotseries()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotseries());
    }

  }
  // repeated .LS.GetSnapshotsResponse.SnapshotArtwork snapshotsArtwork = 2;
  total_size += 1 * this->snapshotsartwork_size();
  for (int i = 0; i < this->snapshotsartwork_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->snapshotsartwork(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshotsResponse::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshotsResponse* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetSnapshotsResponse*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshotsResponse::MergeFrom(const GetSnapshotsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  snapshotsartwork_.MergeFrom(from.snapshotsartwork_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotseries()) {
      set_snapshotseries(from.snapshotseries());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshotsResponse::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotsResponse::CopyFrom(const GetSnapshotsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < snapshotsartwork_size(); i++) {
    if (!this->snapshotsartwork(i).IsInitialized()) return false;
  }
  return true;
}

void GetSnapshotsResponse::Swap(GetSnapshotsResponse* other) {
  if (other != this) {
    std::swap(snapshotseries_, other->snapshotseries_);
    snapshotsartwork_.Swap(&other->snapshotsartwork_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetSnapshotsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshotsResponse_descriptor_;
  metadata.reflection = GetSnapshotsResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LS

// @@protoc_insertion_point(global_scope)
