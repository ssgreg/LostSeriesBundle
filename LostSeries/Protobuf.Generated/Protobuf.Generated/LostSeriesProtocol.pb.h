// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LostSeriesProtocol.proto

#ifndef PROTOBUF_LostSeriesProtocol_2eproto__INCLUDED
#define PROTOBUF_LostSeriesProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

class Header;
class Message;
class SubscriptionRecord;
class SeriesRequest;
class SeriesResponse;
class SeriesResponse_Episode;
class SeriesResponse_TVShow;
class ArtworkRequest;
class ArtworkResponse;
class SetSubscriptionRequest;
class SetSubscriptionResponse;
class GetSubscriptionRequest;
class GetSubscriptionResponse;
class GetUnwatchedSeriesRequest;
class GetUnwatchedSeriesResponse;
class GetUnwatchedSeriesResponse_Episode;
class SetUnwatchedSeriesRequest;
class SetUnwatchedSeriesRequest_Episode;
class SetUnwatchedSeriesResponse;

// ===================================================================

class Header : public ::google_public::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 messageID = 1;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 1;
  inline ::google_public::protobuf::int64 messageid() const;
  inline void set_messageid(::google_public::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:LS.Header)
 private:
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::int64 messageid_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google_public::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LS.SeriesRequest seriesRequest = 1000;
  inline bool has_seriesrequest() const;
  inline void clear_seriesrequest();
  static const int kSeriesRequestFieldNumber = 1000;
  inline const ::LS::SeriesRequest& seriesrequest() const;
  inline ::LS::SeriesRequest* mutable_seriesrequest();
  inline ::LS::SeriesRequest* release_seriesrequest();
  inline void set_allocated_seriesrequest(::LS::SeriesRequest* seriesrequest);

  // optional .LS.ArtworkRequest artworkRequest = 1001;
  inline bool has_artworkrequest() const;
  inline void clear_artworkrequest();
  static const int kArtworkRequestFieldNumber = 1001;
  inline const ::LS::ArtworkRequest& artworkrequest() const;
  inline ::LS::ArtworkRequest* mutable_artworkrequest();
  inline ::LS::ArtworkRequest* release_artworkrequest();
  inline void set_allocated_artworkrequest(::LS::ArtworkRequest* artworkrequest);

  // optional .LS.SetSubscriptionRequest setSubscriptionRequest = 1002;
  inline bool has_setsubscriptionrequest() const;
  inline void clear_setsubscriptionrequest();
  static const int kSetSubscriptionRequestFieldNumber = 1002;
  inline const ::LS::SetSubscriptionRequest& setsubscriptionrequest() const;
  inline ::LS::SetSubscriptionRequest* mutable_setsubscriptionrequest();
  inline ::LS::SetSubscriptionRequest* release_setsubscriptionrequest();
  inline void set_allocated_setsubscriptionrequest(::LS::SetSubscriptionRequest* setsubscriptionrequest);

  // optional .LS.GetSubscriptionRequest getSubscriptionRequest = 1003;
  inline bool has_getsubscriptionrequest() const;
  inline void clear_getsubscriptionrequest();
  static const int kGetSubscriptionRequestFieldNumber = 1003;
  inline const ::LS::GetSubscriptionRequest& getsubscriptionrequest() const;
  inline ::LS::GetSubscriptionRequest* mutable_getsubscriptionrequest();
  inline ::LS::GetSubscriptionRequest* release_getsubscriptionrequest();
  inline void set_allocated_getsubscriptionrequest(::LS::GetSubscriptionRequest* getsubscriptionrequest);

  // optional .LS.GetUnwatchedSeriesRequest getUnwatchedSeriesRequest = 1004;
  inline bool has_getunwatchedseriesrequest() const;
  inline void clear_getunwatchedseriesrequest();
  static const int kGetUnwatchedSeriesRequestFieldNumber = 1004;
  inline const ::LS::GetUnwatchedSeriesRequest& getunwatchedseriesrequest() const;
  inline ::LS::GetUnwatchedSeriesRequest* mutable_getunwatchedseriesrequest();
  inline ::LS::GetUnwatchedSeriesRequest* release_getunwatchedseriesrequest();
  inline void set_allocated_getunwatchedseriesrequest(::LS::GetUnwatchedSeriesRequest* getunwatchedseriesrequest);

  // optional .LS.SetUnwatchedSeriesRequest setUnwatchedSeriesRequest = 1005;
  inline bool has_setunwatchedseriesrequest() const;
  inline void clear_setunwatchedseriesrequest();
  static const int kSetUnwatchedSeriesRequestFieldNumber = 1005;
  inline const ::LS::SetUnwatchedSeriesRequest& setunwatchedseriesrequest() const;
  inline ::LS::SetUnwatchedSeriesRequest* mutable_setunwatchedseriesrequest();
  inline ::LS::SetUnwatchedSeriesRequest* release_setunwatchedseriesrequest();
  inline void set_allocated_setunwatchedseriesrequest(::LS::SetUnwatchedSeriesRequest* setunwatchedseriesrequest);

  // optional .LS.SeriesResponse seriesResponse = 2000;
  inline bool has_seriesresponse() const;
  inline void clear_seriesresponse();
  static const int kSeriesResponseFieldNumber = 2000;
  inline const ::LS::SeriesResponse& seriesresponse() const;
  inline ::LS::SeriesResponse* mutable_seriesresponse();
  inline ::LS::SeriesResponse* release_seriesresponse();
  inline void set_allocated_seriesresponse(::LS::SeriesResponse* seriesresponse);

  // optional .LS.ArtworkResponse artworkResponse = 2001;
  inline bool has_artworkresponse() const;
  inline void clear_artworkresponse();
  static const int kArtworkResponseFieldNumber = 2001;
  inline const ::LS::ArtworkResponse& artworkresponse() const;
  inline ::LS::ArtworkResponse* mutable_artworkresponse();
  inline ::LS::ArtworkResponse* release_artworkresponse();
  inline void set_allocated_artworkresponse(::LS::ArtworkResponse* artworkresponse);

  // optional .LS.SetSubscriptionResponse setSubscriptionResponse = 2002;
  inline bool has_setsubscriptionresponse() const;
  inline void clear_setsubscriptionresponse();
  static const int kSetSubscriptionResponseFieldNumber = 2002;
  inline const ::LS::SetSubscriptionResponse& setsubscriptionresponse() const;
  inline ::LS::SetSubscriptionResponse* mutable_setsubscriptionresponse();
  inline ::LS::SetSubscriptionResponse* release_setsubscriptionresponse();
  inline void set_allocated_setsubscriptionresponse(::LS::SetSubscriptionResponse* setsubscriptionresponse);

  // optional .LS.GetSubscriptionResponse getSubscriptionResponse = 2003;
  inline bool has_getsubscriptionresponse() const;
  inline void clear_getsubscriptionresponse();
  static const int kGetSubscriptionResponseFieldNumber = 2003;
  inline const ::LS::GetSubscriptionResponse& getsubscriptionresponse() const;
  inline ::LS::GetSubscriptionResponse* mutable_getsubscriptionresponse();
  inline ::LS::GetSubscriptionResponse* release_getsubscriptionresponse();
  inline void set_allocated_getsubscriptionresponse(::LS::GetSubscriptionResponse* getsubscriptionresponse);

  // optional .LS.GetUnwatchedSeriesResponse getUnwatchedSeriesResponse = 2004;
  inline bool has_getunwatchedseriesresponse() const;
  inline void clear_getunwatchedseriesresponse();
  static const int kGetUnwatchedSeriesResponseFieldNumber = 2004;
  inline const ::LS::GetUnwatchedSeriesResponse& getunwatchedseriesresponse() const;
  inline ::LS::GetUnwatchedSeriesResponse* mutable_getunwatchedseriesresponse();
  inline ::LS::GetUnwatchedSeriesResponse* release_getunwatchedseriesresponse();
  inline void set_allocated_getunwatchedseriesresponse(::LS::GetUnwatchedSeriesResponse* getunwatchedseriesresponse);

  // optional .LS.SetUnwatchedSeriesResponse setUnwatchedSeriesResponse = 2005;
  inline bool has_setunwatchedseriesresponse() const;
  inline void clear_setunwatchedseriesresponse();
  static const int kSetUnwatchedSeriesResponseFieldNumber = 2005;
  inline const ::LS::SetUnwatchedSeriesResponse& setunwatchedseriesresponse() const;
  inline ::LS::SetUnwatchedSeriesResponse* mutable_setunwatchedseriesresponse();
  inline ::LS::SetUnwatchedSeriesResponse* release_setunwatchedseriesresponse();
  inline void set_allocated_setunwatchedseriesresponse(::LS::SetUnwatchedSeriesResponse* setunwatchedseriesresponse);

  // @@protoc_insertion_point(class_scope:LS.Message)
 private:
  inline void set_has_seriesrequest();
  inline void clear_has_seriesrequest();
  inline void set_has_artworkrequest();
  inline void clear_has_artworkrequest();
  inline void set_has_setsubscriptionrequest();
  inline void clear_has_setsubscriptionrequest();
  inline void set_has_getsubscriptionrequest();
  inline void clear_has_getsubscriptionrequest();
  inline void set_has_getunwatchedseriesrequest();
  inline void clear_has_getunwatchedseriesrequest();
  inline void set_has_setunwatchedseriesrequest();
  inline void clear_has_setunwatchedseriesrequest();
  inline void set_has_seriesresponse();
  inline void clear_has_seriesresponse();
  inline void set_has_artworkresponse();
  inline void clear_has_artworkresponse();
  inline void set_has_setsubscriptionresponse();
  inline void clear_has_setsubscriptionresponse();
  inline void set_has_getsubscriptionresponse();
  inline void clear_has_getsubscriptionresponse();
  inline void set_has_getunwatchedseriesresponse();
  inline void clear_has_getunwatchedseriesresponse();
  inline void set_has_setunwatchedseriesresponse();
  inline void clear_has_setunwatchedseriesresponse();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::LS::SeriesRequest* seriesrequest_;
  ::LS::ArtworkRequest* artworkrequest_;
  ::LS::SetSubscriptionRequest* setsubscriptionrequest_;
  ::LS::GetSubscriptionRequest* getsubscriptionrequest_;
  ::LS::GetUnwatchedSeriesRequest* getunwatchedseriesrequest_;
  ::LS::SetUnwatchedSeriesRequest* setunwatchedseriesrequest_;
  ::LS::SeriesResponse* seriesresponse_;
  ::LS::ArtworkResponse* artworkresponse_;
  ::LS::SetSubscriptionResponse* setsubscriptionresponse_;
  ::LS::GetSubscriptionResponse* getsubscriptionresponse_;
  ::LS::GetUnwatchedSeriesResponse* getunwatchedseriesresponse_;
  ::LS::SetUnwatchedSeriesResponse* setunwatchedseriesresponse_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class SubscriptionRecord : public ::google_public::protobuf::Message {
 public:
  SubscriptionRecord();
  virtual ~SubscriptionRecord();

  SubscriptionRecord(const SubscriptionRecord& from);

  inline SubscriptionRecord& operator=(const SubscriptionRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SubscriptionRecord& default_instance();

  void Swap(SubscriptionRecord* other);

  // implements Message ----------------------------------------------

  SubscriptionRecord* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SubscriptionRecord& from);
  void MergeFrom(const SubscriptionRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:LS.SubscriptionRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SubscriptionRecord* default_instance_;
};
// -------------------------------------------------------------------

class SeriesRequest : public ::google_public::protobuf::Message {
 public:
  SeriesRequest();
  virtual ~SeriesRequest();

  SeriesRequest(const SeriesRequest& from);

  inline SeriesRequest& operator=(const SeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesRequest& default_instance();

  void Swap(SeriesRequest* other);

  // implements Message ----------------------------------------------

  SeriesRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesRequest& from);
  void MergeFrom(const SeriesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LS.SeriesRequest)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class SeriesResponse_Episode : public ::google_public::protobuf::Message {
 public:
  SeriesResponse_Episode();
  virtual ~SeriesResponse_Episode();

  SeriesResponse_Episode(const SeriesResponse_Episode& from);

  inline SeriesResponse_Episode& operator=(const SeriesResponse_Episode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesResponse_Episode& default_instance();

  void Swap(SeriesResponse_Episode* other);

  // implements Message ----------------------------------------------

  SeriesResponse_Episode* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesResponse_Episode& from);
  void MergeFrom(const SeriesResponse_Episode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string originalName = 2;
  inline bool has_originalname() const;
  inline void clear_originalname();
  static const int kOriginalNameFieldNumber = 2;
  inline const ::std::string& originalname() const;
  inline void set_originalname(const ::std::string& value);
  inline void set_originalname(const char* value);
  inline void set_originalname(const char* value, size_t size);
  inline ::std::string* mutable_originalname();
  inline ::std::string* release_originalname();
  inline void set_allocated_originalname(::std::string* originalname);

  // required int32 number = 3;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 3;
  inline ::google_public::protobuf::int32 number() const;
  inline void set_number(::google_public::protobuf::int32 value);

  // required string dateTranslate = 4;
  inline bool has_datetranslate() const;
  inline void clear_datetranslate();
  static const int kDateTranslateFieldNumber = 4;
  inline const ::std::string& datetranslate() const;
  inline void set_datetranslate(const ::std::string& value);
  inline void set_datetranslate(const char* value);
  inline void set_datetranslate(const char* value, size_t size);
  inline ::std::string* mutable_datetranslate();
  inline ::std::string* release_datetranslate();
  inline void set_allocated_datetranslate(::std::string* datetranslate);

  // @@protoc_insertion_point(class_scope:LS.SeriesResponse.Episode)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_originalname();
  inline void clear_has_originalname();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_datetranslate();
  inline void clear_has_datetranslate();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* originalname_;
  ::std::string* datetranslate_;
  ::google_public::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesResponse_Episode* default_instance_;
};
// -------------------------------------------------------------------

class SeriesResponse_TVShow : public ::google_public::protobuf::Message {
 public:
  SeriesResponse_TVShow();
  virtual ~SeriesResponse_TVShow();

  SeriesResponse_TVShow(const SeriesResponse_TVShow& from);

  inline SeriesResponse_TVShow& operator=(const SeriesResponse_TVShow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesResponse_TVShow& default_instance();

  void Swap(SeriesResponse_TVShow* other);

  // implements Message ----------------------------------------------

  SeriesResponse_TVShow* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesResponse_TVShow& from);
  void MergeFrom(const SeriesResponse_TVShow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string originalTitle = 2;
  inline bool has_originaltitle() const;
  inline void clear_originaltitle();
  static const int kOriginalTitleFieldNumber = 2;
  inline const ::std::string& originaltitle() const;
  inline void set_originaltitle(const ::std::string& value);
  inline void set_originaltitle(const char* value);
  inline void set_originaltitle(const char* value, size_t size);
  inline ::std::string* mutable_originaltitle();
  inline ::std::string* release_originaltitle();
  inline void set_allocated_originaltitle(::std::string* originaltitle);

  // required int32 seasonNumber = 3;
  inline bool has_seasonnumber() const;
  inline void clear_seasonnumber();
  static const int kSeasonNumberFieldNumber = 3;
  inline ::google_public::protobuf::int32 seasonnumber() const;
  inline void set_seasonnumber(::google_public::protobuf::int32 value);

  // required int32 episodeNumber = 4;
  inline bool has_episodenumber() const;
  inline void clear_episodenumber();
  static const int kEpisodeNumberFieldNumber = 4;
  inline ::google_public::protobuf::int32 episodenumber() const;
  inline void set_episodenumber(::google_public::protobuf::int32 value);

  // required string id = 99;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 99;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string snapshot = 100;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 100;
  inline const ::std::string& snapshot() const;
  inline void set_snapshot(const ::std::string& value);
  inline void set_snapshot(const char* value);
  inline void set_snapshot(const char* value, size_t size);
  inline ::std::string* mutable_snapshot();
  inline ::std::string* release_snapshot();
  inline void set_allocated_snapshot(::std::string* snapshot);

  // repeated .LS.SeriesResponse.Episode episodes = 101;
  inline int episodes_size() const;
  inline void clear_episodes();
  static const int kEpisodesFieldNumber = 101;
  inline const ::LS::SeriesResponse_Episode& episodes(int index) const;
  inline ::LS::SeriesResponse_Episode* mutable_episodes(int index);
  inline ::LS::SeriesResponse_Episode* add_episodes();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_Episode >&
      episodes() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_Episode >*
      mutable_episodes();

  // @@protoc_insertion_point(class_scope:LS.SeriesResponse.TVShow)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_originaltitle();
  inline void clear_has_originaltitle();
  inline void set_has_seasonnumber();
  inline void clear_has_seasonnumber();
  inline void set_has_episodenumber();
  inline void clear_has_episodenumber();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* originaltitle_;
  ::google_public::protobuf::int32 seasonnumber_;
  ::google_public::protobuf::int32 episodenumber_;
  ::std::string* id_;
  ::std::string* snapshot_;
  ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_Episode > episodes_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesResponse_TVShow* default_instance_;
};
// -------------------------------------------------------------------

class SeriesResponse : public ::google_public::protobuf::Message {
 public:
  SeriesResponse();
  virtual ~SeriesResponse();

  SeriesResponse(const SeriesResponse& from);

  inline SeriesResponse& operator=(const SeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SeriesResponse& default_instance();

  void Swap(SeriesResponse* other);

  // implements Message ----------------------------------------------

  SeriesResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SeriesResponse& from);
  void MergeFrom(const SeriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SeriesResponse_Episode Episode;
  typedef SeriesResponse_TVShow TVShow;

  // accessors -------------------------------------------------------

  // repeated .LS.SeriesResponse.TVShow shows = 1;
  inline int shows_size() const;
  inline void clear_shows();
  static const int kShowsFieldNumber = 1;
  inline const ::LS::SeriesResponse_TVShow& shows(int index) const;
  inline ::LS::SeriesResponse_TVShow* mutable_shows(int index);
  inline ::LS::SeriesResponse_TVShow* add_shows();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >&
      shows() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >*
      mutable_shows();

  // @@protoc_insertion_point(class_scope:LS.SeriesResponse)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow > shows_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SeriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class ArtworkRequest : public ::google_public::protobuf::Message {
 public:
  ArtworkRequest();
  virtual ~ArtworkRequest();

  ArtworkRequest(const ArtworkRequest& from);

  inline ArtworkRequest& operator=(const ArtworkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ArtworkRequest& default_instance();

  void Swap(ArtworkRequest* other);

  // implements Message ----------------------------------------------

  ArtworkRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ArtworkRequest& from);
  void MergeFrom(const ArtworkRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string idShow = 1;
  inline bool has_idshow() const;
  inline void clear_idshow();
  static const int kIdShowFieldNumber = 1;
  inline const ::std::string& idshow() const;
  inline void set_idshow(const ::std::string& value);
  inline void set_idshow(const char* value);
  inline void set_idshow(const char* value, size_t size);
  inline ::std::string* mutable_idshow();
  inline ::std::string* release_idshow();
  inline void set_allocated_idshow(::std::string* idshow);

  // required int32 seasonNumber = 2;
  inline bool has_seasonnumber() const;
  inline void clear_seasonnumber();
  static const int kSeasonNumberFieldNumber = 2;
  inline ::google_public::protobuf::int32 seasonnumber() const;
  inline void set_seasonnumber(::google_public::protobuf::int32 value);

  // required bool thumbnail = 3;
  inline bool has_thumbnail() const;
  inline void clear_thumbnail();
  static const int kThumbnailFieldNumber = 3;
  inline bool thumbnail() const;
  inline void set_thumbnail(bool value);

  // required string snapshot = 100;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 100;
  inline const ::std::string& snapshot() const;
  inline void set_snapshot(const ::std::string& value);
  inline void set_snapshot(const char* value);
  inline void set_snapshot(const char* value, size_t size);
  inline ::std::string* mutable_snapshot();
  inline ::std::string* release_snapshot();
  inline void set_allocated_snapshot(::std::string* snapshot);

  // @@protoc_insertion_point(class_scope:LS.ArtworkRequest)
 private:
  inline void set_has_idshow();
  inline void clear_has_idshow();
  inline void set_has_seasonnumber();
  inline void clear_has_seasonnumber();
  inline void set_has_thumbnail();
  inline void clear_has_thumbnail();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idshow_;
  ::google_public::protobuf::int32 seasonnumber_;
  bool thumbnail_;
  ::std::string* snapshot_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static ArtworkRequest* default_instance_;
};
// -------------------------------------------------------------------

class ArtworkResponse : public ::google_public::protobuf::Message {
 public:
  ArtworkResponse();
  virtual ~ArtworkResponse();

  ArtworkResponse(const ArtworkResponse& from);

  inline ArtworkResponse& operator=(const ArtworkResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ArtworkResponse& default_instance();

  void Swap(ArtworkResponse* other);

  // implements Message ----------------------------------------------

  ArtworkResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ArtworkResponse& from);
  void MergeFrom(const ArtworkResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LS.ArtworkResponse)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static ArtworkResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetSubscriptionRequest : public ::google_public::protobuf::Message {
 public:
  SetSubscriptionRequest();
  virtual ~SetSubscriptionRequest();

  SetSubscriptionRequest(const SetSubscriptionRequest& from);

  inline SetSubscriptionRequest& operator=(const SetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SetSubscriptionRequest& default_instance();

  void Swap(SetSubscriptionRequest* other);

  // implements Message ----------------------------------------------

  SetSubscriptionRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SetSubscriptionRequest& from);
  void MergeFrom(const SetSubscriptionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string idClient = 1;
  inline bool has_idclient() const;
  inline void clear_idclient();
  static const int kIdClientFieldNumber = 1;
  inline const ::std::string& idclient() const;
  inline void set_idclient(const ::std::string& value);
  inline void set_idclient(const char* value);
  inline void set_idclient(const char* value, size_t size);
  inline ::std::string* mutable_idclient();
  inline ::std::string* release_idclient();
  inline void set_allocated_idclient(::std::string* idclient);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // repeated .LS.SubscriptionRecord subscriptions = 3;
  inline int subscriptions_size() const;
  inline void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 3;
  inline const ::LS::SubscriptionRecord& subscriptions(int index) const;
  inline ::LS::SubscriptionRecord* mutable_subscriptions(int index);
  inline ::LS::SubscriptionRecord* add_subscriptions();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >&
      subscriptions() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >*
      mutable_subscriptions();

  // required bool flagUnsubscribe = 4;
  inline bool has_flagunsubscribe() const;
  inline void clear_flagunsubscribe();
  static const int kFlagUnsubscribeFieldNumber = 4;
  inline bool flagunsubscribe() const;
  inline void set_flagunsubscribe(bool value);

  // @@protoc_insertion_point(class_scope:LS.SetSubscriptionRequest)
 private:
  inline void set_has_idclient();
  inline void clear_has_idclient();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_flagunsubscribe();
  inline void clear_has_flagunsubscribe();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idclient_;
  ::std::string* token_;
  ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord > subscriptions_;
  bool flagunsubscribe_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetSubscriptionRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetSubscriptionResponse : public ::google_public::protobuf::Message {
 public:
  SetSubscriptionResponse();
  virtual ~SetSubscriptionResponse();

  SetSubscriptionResponse(const SetSubscriptionResponse& from);

  inline SetSubscriptionResponse& operator=(const SetSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SetSubscriptionResponse& default_instance();

  void Swap(SetSubscriptionResponse* other);

  // implements Message ----------------------------------------------

  SetSubscriptionResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SetSubscriptionResponse& from);
  void MergeFrom(const SetSubscriptionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LS.SetSubscriptionResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetSubscriptionResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetSubscriptionRequest : public ::google_public::protobuf::Message {
 public:
  GetSubscriptionRequest();
  virtual ~GetSubscriptionRequest();

  GetSubscriptionRequest(const GetSubscriptionRequest& from);

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetSubscriptionRequest& default_instance();

  void Swap(GetSubscriptionRequest* other);

  // implements Message ----------------------------------------------

  GetSubscriptionRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetSubscriptionRequest& from);
  void MergeFrom(const GetSubscriptionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string idClient = 1;
  inline bool has_idclient() const;
  inline void clear_idclient();
  static const int kIdClientFieldNumber = 1;
  inline const ::std::string& idclient() const;
  inline void set_idclient(const ::std::string& value);
  inline void set_idclient(const char* value);
  inline void set_idclient(const char* value, size_t size);
  inline ::std::string* mutable_idclient();
  inline ::std::string* release_idclient();
  inline void set_allocated_idclient(::std::string* idclient);

  // @@protoc_insertion_point(class_scope:LS.GetSubscriptionRequest)
 private:
  inline void set_has_idclient();
  inline void clear_has_idclient();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idclient_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetSubscriptionRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetSubscriptionResponse : public ::google_public::protobuf::Message {
 public:
  GetSubscriptionResponse();
  virtual ~GetSubscriptionResponse();

  GetSubscriptionResponse(const GetSubscriptionResponse& from);

  inline GetSubscriptionResponse& operator=(const GetSubscriptionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetSubscriptionResponse& default_instance();

  void Swap(GetSubscriptionResponse* other);

  // implements Message ----------------------------------------------

  GetSubscriptionResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetSubscriptionResponse& from);
  void MergeFrom(const GetSubscriptionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LS.SubscriptionRecord subscriptions = 1;
  inline int subscriptions_size() const;
  inline void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  inline const ::LS::SubscriptionRecord& subscriptions(int index) const;
  inline ::LS::SubscriptionRecord* mutable_subscriptions(int index);
  inline ::LS::SubscriptionRecord* add_subscriptions();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >&
      subscriptions() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >*
      mutable_subscriptions();

  // @@protoc_insertion_point(class_scope:LS.GetSubscriptionResponse)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord > subscriptions_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetSubscriptionResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetUnwatchedSeriesRequest : public ::google_public::protobuf::Message {
 public:
  GetUnwatchedSeriesRequest();
  virtual ~GetUnwatchedSeriesRequest();

  GetUnwatchedSeriesRequest(const GetUnwatchedSeriesRequest& from);

  inline GetUnwatchedSeriesRequest& operator=(const GetUnwatchedSeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetUnwatchedSeriesRequest& default_instance();

  void Swap(GetUnwatchedSeriesRequest* other);

  // implements Message ----------------------------------------------

  GetUnwatchedSeriesRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetUnwatchedSeriesRequest& from);
  void MergeFrom(const GetUnwatchedSeriesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string idClient = 1;
  inline bool has_idclient() const;
  inline void clear_idclient();
  static const int kIdClientFieldNumber = 1;
  inline const ::std::string& idclient() const;
  inline void set_idclient(const ::std::string& value);
  inline void set_idclient(const char* value);
  inline void set_idclient(const char* value, size_t size);
  inline ::std::string* mutable_idclient();
  inline ::std::string* release_idclient();
  inline void set_allocated_idclient(::std::string* idclient);

  // @@protoc_insertion_point(class_scope:LS.GetUnwatchedSeriesRequest)
 private:
  inline void set_has_idclient();
  inline void clear_has_idclient();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idclient_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetUnwatchedSeriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetUnwatchedSeriesResponse_Episode : public ::google_public::protobuf::Message {
 public:
  GetUnwatchedSeriesResponse_Episode();
  virtual ~GetUnwatchedSeriesResponse_Episode();

  GetUnwatchedSeriesResponse_Episode(const GetUnwatchedSeriesResponse_Episode& from);

  inline GetUnwatchedSeriesResponse_Episode& operator=(const GetUnwatchedSeriesResponse_Episode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetUnwatchedSeriesResponse_Episode& default_instance();

  void Swap(GetUnwatchedSeriesResponse_Episode* other);

  // implements Message ----------------------------------------------

  GetUnwatchedSeriesResponse_Episode* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetUnwatchedSeriesResponse_Episode& from);
  void MergeFrom(const GetUnwatchedSeriesResponse_Episode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string idShow = 1;
  inline bool has_idshow() const;
  inline void clear_idshow();
  static const int kIdShowFieldNumber = 1;
  inline const ::std::string& idshow() const;
  inline void set_idshow(const ::std::string& value);
  inline void set_idshow(const char* value);
  inline void set_idshow(const char* value, size_t size);
  inline ::std::string* mutable_idshow();
  inline ::std::string* release_idshow();
  inline void set_allocated_idshow(::std::string* idshow);

  // required int32 numberSeason = 2;
  inline bool has_numberseason() const;
  inline void clear_numberseason();
  static const int kNumberSeasonFieldNumber = 2;
  inline ::google_public::protobuf::int32 numberseason() const;
  inline void set_numberseason(::google_public::protobuf::int32 value);

  // required int32 numberEpisode = 3;
  inline bool has_numberepisode() const;
  inline void clear_numberepisode();
  static const int kNumberEpisodeFieldNumber = 3;
  inline ::google_public::protobuf::int32 numberepisode() const;
  inline void set_numberepisode(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LS.GetUnwatchedSeriesResponse.Episode)
 private:
  inline void set_has_idshow();
  inline void clear_has_idshow();
  inline void set_has_numberseason();
  inline void clear_has_numberseason();
  inline void set_has_numberepisode();
  inline void clear_has_numberepisode();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idshow_;
  ::google_public::protobuf::int32 numberseason_;
  ::google_public::protobuf::int32 numberepisode_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetUnwatchedSeriesResponse_Episode* default_instance_;
};
// -------------------------------------------------------------------

class GetUnwatchedSeriesResponse : public ::google_public::protobuf::Message {
 public:
  GetUnwatchedSeriesResponse();
  virtual ~GetUnwatchedSeriesResponse();

  GetUnwatchedSeriesResponse(const GetUnwatchedSeriesResponse& from);

  inline GetUnwatchedSeriesResponse& operator=(const GetUnwatchedSeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetUnwatchedSeriesResponse& default_instance();

  void Swap(GetUnwatchedSeriesResponse* other);

  // implements Message ----------------------------------------------

  GetUnwatchedSeriesResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetUnwatchedSeriesResponse& from);
  void MergeFrom(const GetUnwatchedSeriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetUnwatchedSeriesResponse_Episode Episode;

  // accessors -------------------------------------------------------

  // repeated .LS.GetUnwatchedSeriesResponse.Episode episodes = 1;
  inline int episodes_size() const;
  inline void clear_episodes();
  static const int kEpisodesFieldNumber = 1;
  inline const ::LS::GetUnwatchedSeriesResponse_Episode& episodes(int index) const;
  inline ::LS::GetUnwatchedSeriesResponse_Episode* mutable_episodes(int index);
  inline ::LS::GetUnwatchedSeriesResponse_Episode* add_episodes();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::GetUnwatchedSeriesResponse_Episode >&
      episodes() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::GetUnwatchedSeriesResponse_Episode >*
      mutable_episodes();

  // @@protoc_insertion_point(class_scope:LS.GetUnwatchedSeriesResponse)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::RepeatedPtrField< ::LS::GetUnwatchedSeriesResponse_Episode > episodes_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetUnwatchedSeriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetUnwatchedSeriesRequest_Episode : public ::google_public::protobuf::Message {
 public:
  SetUnwatchedSeriesRequest_Episode();
  virtual ~SetUnwatchedSeriesRequest_Episode();

  SetUnwatchedSeriesRequest_Episode(const SetUnwatchedSeriesRequest_Episode& from);

  inline SetUnwatchedSeriesRequest_Episode& operator=(const SetUnwatchedSeriesRequest_Episode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SetUnwatchedSeriesRequest_Episode& default_instance();

  void Swap(SetUnwatchedSeriesRequest_Episode* other);

  // implements Message ----------------------------------------------

  SetUnwatchedSeriesRequest_Episode* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SetUnwatchedSeriesRequest_Episode& from);
  void MergeFrom(const SetUnwatchedSeriesRequest_Episode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string idShow = 1;
  inline bool has_idshow() const;
  inline void clear_idshow();
  static const int kIdShowFieldNumber = 1;
  inline const ::std::string& idshow() const;
  inline void set_idshow(const ::std::string& value);
  inline void set_idshow(const char* value);
  inline void set_idshow(const char* value, size_t size);
  inline ::std::string* mutable_idshow();
  inline ::std::string* release_idshow();
  inline void set_allocated_idshow(::std::string* idshow);

  // required int32 numberSeason = 2;
  inline bool has_numberseason() const;
  inline void clear_numberseason();
  static const int kNumberSeasonFieldNumber = 2;
  inline ::google_public::protobuf::int32 numberseason() const;
  inline void set_numberseason(::google_public::protobuf::int32 value);

  // required int32 numberEpisode = 3;
  inline bool has_numberepisode() const;
  inline void clear_numberepisode();
  static const int kNumberEpisodeFieldNumber = 3;
  inline ::google_public::protobuf::int32 numberepisode() const;
  inline void set_numberepisode(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LS.SetUnwatchedSeriesRequest.Episode)
 private:
  inline void set_has_idshow();
  inline void clear_has_idshow();
  inline void set_has_numberseason();
  inline void clear_has_numberseason();
  inline void set_has_numberepisode();
  inline void clear_has_numberepisode();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idshow_;
  ::google_public::protobuf::int32 numberseason_;
  ::google_public::protobuf::int32 numberepisode_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetUnwatchedSeriesRequest_Episode* default_instance_;
};
// -------------------------------------------------------------------

class SetUnwatchedSeriesRequest : public ::google_public::protobuf::Message {
 public:
  SetUnwatchedSeriesRequest();
  virtual ~SetUnwatchedSeriesRequest();

  SetUnwatchedSeriesRequest(const SetUnwatchedSeriesRequest& from);

  inline SetUnwatchedSeriesRequest& operator=(const SetUnwatchedSeriesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SetUnwatchedSeriesRequest& default_instance();

  void Swap(SetUnwatchedSeriesRequest* other);

  // implements Message ----------------------------------------------

  SetUnwatchedSeriesRequest* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SetUnwatchedSeriesRequest& from);
  void MergeFrom(const SetUnwatchedSeriesRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SetUnwatchedSeriesRequest_Episode Episode;

  // accessors -------------------------------------------------------

  // required string idClient = 1;
  inline bool has_idclient() const;
  inline void clear_idclient();
  static const int kIdClientFieldNumber = 1;
  inline const ::std::string& idclient() const;
  inline void set_idclient(const ::std::string& value);
  inline void set_idclient(const char* value);
  inline void set_idclient(const char* value, size_t size);
  inline ::std::string* mutable_idclient();
  inline ::std::string* release_idclient();
  inline void set_allocated_idclient(::std::string* idclient);

  // repeated .LS.SetUnwatchedSeriesRequest.Episode episodes = 2;
  inline int episodes_size() const;
  inline void clear_episodes();
  static const int kEpisodesFieldNumber = 2;
  inline const ::LS::SetUnwatchedSeriesRequest_Episode& episodes(int index) const;
  inline ::LS::SetUnwatchedSeriesRequest_Episode* mutable_episodes(int index);
  inline ::LS::SetUnwatchedSeriesRequest_Episode* add_episodes();
  inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SetUnwatchedSeriesRequest_Episode >&
      episodes() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::LS::SetUnwatchedSeriesRequest_Episode >*
      mutable_episodes();

  // required bool flagRemove = 3;
  inline bool has_flagremove() const;
  inline void clear_flagremove();
  static const int kFlagRemoveFieldNumber = 3;
  inline bool flagremove() const;
  inline void set_flagremove(bool value);

  // @@protoc_insertion_point(class_scope:LS.SetUnwatchedSeriesRequest)
 private:
  inline void set_has_idclient();
  inline void clear_has_idclient();
  inline void set_has_flagremove();
  inline void clear_has_flagremove();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* idclient_;
  ::google_public::protobuf::RepeatedPtrField< ::LS::SetUnwatchedSeriesRequest_Episode > episodes_;
  bool flagremove_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetUnwatchedSeriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetUnwatchedSeriesResponse : public ::google_public::protobuf::Message {
 public:
  SetUnwatchedSeriesResponse();
  virtual ~SetUnwatchedSeriesResponse();

  SetUnwatchedSeriesResponse(const SetUnwatchedSeriesResponse& from);

  inline SetUnwatchedSeriesResponse& operator=(const SetUnwatchedSeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SetUnwatchedSeriesResponse& default_instance();

  void Swap(SetUnwatchedSeriesResponse* other);

  // implements Message ----------------------------------------------

  SetUnwatchedSeriesResponse* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SetUnwatchedSeriesResponse& from);
  void MergeFrom(const SetUnwatchedSeriesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:LS.SetUnwatchedSeriesResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_AssignDesc_LostSeriesProtocol_2eproto();
  friend void protobuf_ShutdownFile_LostSeriesProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetUnwatchedSeriesResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Header

// required int64 messageID = 1;
inline bool Header::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google_public::protobuf::int64 Header::messageid() const {
  return messageid_;
}
inline void Header::set_messageid(::google_public::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
}

// -------------------------------------------------------------------

// Message

// optional .LS.SeriesRequest seriesRequest = 1000;
inline bool Message::has_seriesrequest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_seriesrequest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_seriesrequest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_seriesrequest() {
  if (seriesrequest_ != NULL) seriesrequest_->::LS::SeriesRequest::Clear();
  clear_has_seriesrequest();
}
inline const ::LS::SeriesRequest& Message::seriesrequest() const {
  return seriesrequest_ != NULL ? *seriesrequest_ : *default_instance_->seriesrequest_;
}
inline ::LS::SeriesRequest* Message::mutable_seriesrequest() {
  set_has_seriesrequest();
  if (seriesrequest_ == NULL) seriesrequest_ = new ::LS::SeriesRequest;
  return seriesrequest_;
}
inline ::LS::SeriesRequest* Message::release_seriesrequest() {
  clear_has_seriesrequest();
  ::LS::SeriesRequest* temp = seriesrequest_;
  seriesrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_seriesrequest(::LS::SeriesRequest* seriesrequest) {
  delete seriesrequest_;
  seriesrequest_ = seriesrequest;
  if (seriesrequest) {
    set_has_seriesrequest();
  } else {
    clear_has_seriesrequest();
  }
}

// optional .LS.ArtworkRequest artworkRequest = 1001;
inline bool Message::has_artworkrequest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_artworkrequest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_artworkrequest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_artworkrequest() {
  if (artworkrequest_ != NULL) artworkrequest_->::LS::ArtworkRequest::Clear();
  clear_has_artworkrequest();
}
inline const ::LS::ArtworkRequest& Message::artworkrequest() const {
  return artworkrequest_ != NULL ? *artworkrequest_ : *default_instance_->artworkrequest_;
}
inline ::LS::ArtworkRequest* Message::mutable_artworkrequest() {
  set_has_artworkrequest();
  if (artworkrequest_ == NULL) artworkrequest_ = new ::LS::ArtworkRequest;
  return artworkrequest_;
}
inline ::LS::ArtworkRequest* Message::release_artworkrequest() {
  clear_has_artworkrequest();
  ::LS::ArtworkRequest* temp = artworkrequest_;
  artworkrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_artworkrequest(::LS::ArtworkRequest* artworkrequest) {
  delete artworkrequest_;
  artworkrequest_ = artworkrequest;
  if (artworkrequest) {
    set_has_artworkrequest();
  } else {
    clear_has_artworkrequest();
  }
}

// optional .LS.SetSubscriptionRequest setSubscriptionRequest = 1002;
inline bool Message::has_setsubscriptionrequest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_setsubscriptionrequest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_setsubscriptionrequest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_setsubscriptionrequest() {
  if (setsubscriptionrequest_ != NULL) setsubscriptionrequest_->::LS::SetSubscriptionRequest::Clear();
  clear_has_setsubscriptionrequest();
}
inline const ::LS::SetSubscriptionRequest& Message::setsubscriptionrequest() const {
  return setsubscriptionrequest_ != NULL ? *setsubscriptionrequest_ : *default_instance_->setsubscriptionrequest_;
}
inline ::LS::SetSubscriptionRequest* Message::mutable_setsubscriptionrequest() {
  set_has_setsubscriptionrequest();
  if (setsubscriptionrequest_ == NULL) setsubscriptionrequest_ = new ::LS::SetSubscriptionRequest;
  return setsubscriptionrequest_;
}
inline ::LS::SetSubscriptionRequest* Message::release_setsubscriptionrequest() {
  clear_has_setsubscriptionrequest();
  ::LS::SetSubscriptionRequest* temp = setsubscriptionrequest_;
  setsubscriptionrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_setsubscriptionrequest(::LS::SetSubscriptionRequest* setsubscriptionrequest) {
  delete setsubscriptionrequest_;
  setsubscriptionrequest_ = setsubscriptionrequest;
  if (setsubscriptionrequest) {
    set_has_setsubscriptionrequest();
  } else {
    clear_has_setsubscriptionrequest();
  }
}

// optional .LS.GetSubscriptionRequest getSubscriptionRequest = 1003;
inline bool Message::has_getsubscriptionrequest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_getsubscriptionrequest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_getsubscriptionrequest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_getsubscriptionrequest() {
  if (getsubscriptionrequest_ != NULL) getsubscriptionrequest_->::LS::GetSubscriptionRequest::Clear();
  clear_has_getsubscriptionrequest();
}
inline const ::LS::GetSubscriptionRequest& Message::getsubscriptionrequest() const {
  return getsubscriptionrequest_ != NULL ? *getsubscriptionrequest_ : *default_instance_->getsubscriptionrequest_;
}
inline ::LS::GetSubscriptionRequest* Message::mutable_getsubscriptionrequest() {
  set_has_getsubscriptionrequest();
  if (getsubscriptionrequest_ == NULL) getsubscriptionrequest_ = new ::LS::GetSubscriptionRequest;
  return getsubscriptionrequest_;
}
inline ::LS::GetSubscriptionRequest* Message::release_getsubscriptionrequest() {
  clear_has_getsubscriptionrequest();
  ::LS::GetSubscriptionRequest* temp = getsubscriptionrequest_;
  getsubscriptionrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_getsubscriptionrequest(::LS::GetSubscriptionRequest* getsubscriptionrequest) {
  delete getsubscriptionrequest_;
  getsubscriptionrequest_ = getsubscriptionrequest;
  if (getsubscriptionrequest) {
    set_has_getsubscriptionrequest();
  } else {
    clear_has_getsubscriptionrequest();
  }
}

// optional .LS.GetUnwatchedSeriesRequest getUnwatchedSeriesRequest = 1004;
inline bool Message::has_getunwatchedseriesrequest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_getunwatchedseriesrequest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_getunwatchedseriesrequest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_getunwatchedseriesrequest() {
  if (getunwatchedseriesrequest_ != NULL) getunwatchedseriesrequest_->::LS::GetUnwatchedSeriesRequest::Clear();
  clear_has_getunwatchedseriesrequest();
}
inline const ::LS::GetUnwatchedSeriesRequest& Message::getunwatchedseriesrequest() const {
  return getunwatchedseriesrequest_ != NULL ? *getunwatchedseriesrequest_ : *default_instance_->getunwatchedseriesrequest_;
}
inline ::LS::GetUnwatchedSeriesRequest* Message::mutable_getunwatchedseriesrequest() {
  set_has_getunwatchedseriesrequest();
  if (getunwatchedseriesrequest_ == NULL) getunwatchedseriesrequest_ = new ::LS::GetUnwatchedSeriesRequest;
  return getunwatchedseriesrequest_;
}
inline ::LS::GetUnwatchedSeriesRequest* Message::release_getunwatchedseriesrequest() {
  clear_has_getunwatchedseriesrequest();
  ::LS::GetUnwatchedSeriesRequest* temp = getunwatchedseriesrequest_;
  getunwatchedseriesrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_getunwatchedseriesrequest(::LS::GetUnwatchedSeriesRequest* getunwatchedseriesrequest) {
  delete getunwatchedseriesrequest_;
  getunwatchedseriesrequest_ = getunwatchedseriesrequest;
  if (getunwatchedseriesrequest) {
    set_has_getunwatchedseriesrequest();
  } else {
    clear_has_getunwatchedseriesrequest();
  }
}

// optional .LS.SetUnwatchedSeriesRequest setUnwatchedSeriesRequest = 1005;
inline bool Message::has_setunwatchedseriesrequest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message::set_has_setunwatchedseriesrequest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message::clear_has_setunwatchedseriesrequest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message::clear_setunwatchedseriesrequest() {
  if (setunwatchedseriesrequest_ != NULL) setunwatchedseriesrequest_->::LS::SetUnwatchedSeriesRequest::Clear();
  clear_has_setunwatchedseriesrequest();
}
inline const ::LS::SetUnwatchedSeriesRequest& Message::setunwatchedseriesrequest() const {
  return setunwatchedseriesrequest_ != NULL ? *setunwatchedseriesrequest_ : *default_instance_->setunwatchedseriesrequest_;
}
inline ::LS::SetUnwatchedSeriesRequest* Message::mutable_setunwatchedseriesrequest() {
  set_has_setunwatchedseriesrequest();
  if (setunwatchedseriesrequest_ == NULL) setunwatchedseriesrequest_ = new ::LS::SetUnwatchedSeriesRequest;
  return setunwatchedseriesrequest_;
}
inline ::LS::SetUnwatchedSeriesRequest* Message::release_setunwatchedseriesrequest() {
  clear_has_setunwatchedseriesrequest();
  ::LS::SetUnwatchedSeriesRequest* temp = setunwatchedseriesrequest_;
  setunwatchedseriesrequest_ = NULL;
  return temp;
}
inline void Message::set_allocated_setunwatchedseriesrequest(::LS::SetUnwatchedSeriesRequest* setunwatchedseriesrequest) {
  delete setunwatchedseriesrequest_;
  setunwatchedseriesrequest_ = setunwatchedseriesrequest;
  if (setunwatchedseriesrequest) {
    set_has_setunwatchedseriesrequest();
  } else {
    clear_has_setunwatchedseriesrequest();
  }
}

// optional .LS.SeriesResponse seriesResponse = 2000;
inline bool Message::has_seriesresponse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message::set_has_seriesresponse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message::clear_has_seriesresponse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message::clear_seriesresponse() {
  if (seriesresponse_ != NULL) seriesresponse_->::LS::SeriesResponse::Clear();
  clear_has_seriesresponse();
}
inline const ::LS::SeriesResponse& Message::seriesresponse() const {
  return seriesresponse_ != NULL ? *seriesresponse_ : *default_instance_->seriesresponse_;
}
inline ::LS::SeriesResponse* Message::mutable_seriesresponse() {
  set_has_seriesresponse();
  if (seriesresponse_ == NULL) seriesresponse_ = new ::LS::SeriesResponse;
  return seriesresponse_;
}
inline ::LS::SeriesResponse* Message::release_seriesresponse() {
  clear_has_seriesresponse();
  ::LS::SeriesResponse* temp = seriesresponse_;
  seriesresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_seriesresponse(::LS::SeriesResponse* seriesresponse) {
  delete seriesresponse_;
  seriesresponse_ = seriesresponse;
  if (seriesresponse) {
    set_has_seriesresponse();
  } else {
    clear_has_seriesresponse();
  }
}

// optional .LS.ArtworkResponse artworkResponse = 2001;
inline bool Message::has_artworkresponse() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message::set_has_artworkresponse() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message::clear_has_artworkresponse() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message::clear_artworkresponse() {
  if (artworkresponse_ != NULL) artworkresponse_->::LS::ArtworkResponse::Clear();
  clear_has_artworkresponse();
}
inline const ::LS::ArtworkResponse& Message::artworkresponse() const {
  return artworkresponse_ != NULL ? *artworkresponse_ : *default_instance_->artworkresponse_;
}
inline ::LS::ArtworkResponse* Message::mutable_artworkresponse() {
  set_has_artworkresponse();
  if (artworkresponse_ == NULL) artworkresponse_ = new ::LS::ArtworkResponse;
  return artworkresponse_;
}
inline ::LS::ArtworkResponse* Message::release_artworkresponse() {
  clear_has_artworkresponse();
  ::LS::ArtworkResponse* temp = artworkresponse_;
  artworkresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_artworkresponse(::LS::ArtworkResponse* artworkresponse) {
  delete artworkresponse_;
  artworkresponse_ = artworkresponse;
  if (artworkresponse) {
    set_has_artworkresponse();
  } else {
    clear_has_artworkresponse();
  }
}

// optional .LS.SetSubscriptionResponse setSubscriptionResponse = 2002;
inline bool Message::has_setsubscriptionresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message::set_has_setsubscriptionresponse() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message::clear_has_setsubscriptionresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message::clear_setsubscriptionresponse() {
  if (setsubscriptionresponse_ != NULL) setsubscriptionresponse_->::LS::SetSubscriptionResponse::Clear();
  clear_has_setsubscriptionresponse();
}
inline const ::LS::SetSubscriptionResponse& Message::setsubscriptionresponse() const {
  return setsubscriptionresponse_ != NULL ? *setsubscriptionresponse_ : *default_instance_->setsubscriptionresponse_;
}
inline ::LS::SetSubscriptionResponse* Message::mutable_setsubscriptionresponse() {
  set_has_setsubscriptionresponse();
  if (setsubscriptionresponse_ == NULL) setsubscriptionresponse_ = new ::LS::SetSubscriptionResponse;
  return setsubscriptionresponse_;
}
inline ::LS::SetSubscriptionResponse* Message::release_setsubscriptionresponse() {
  clear_has_setsubscriptionresponse();
  ::LS::SetSubscriptionResponse* temp = setsubscriptionresponse_;
  setsubscriptionresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_setsubscriptionresponse(::LS::SetSubscriptionResponse* setsubscriptionresponse) {
  delete setsubscriptionresponse_;
  setsubscriptionresponse_ = setsubscriptionresponse;
  if (setsubscriptionresponse) {
    set_has_setsubscriptionresponse();
  } else {
    clear_has_setsubscriptionresponse();
  }
}

// optional .LS.GetSubscriptionResponse getSubscriptionResponse = 2003;
inline bool Message::has_getsubscriptionresponse() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Message::set_has_getsubscriptionresponse() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Message::clear_has_getsubscriptionresponse() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Message::clear_getsubscriptionresponse() {
  if (getsubscriptionresponse_ != NULL) getsubscriptionresponse_->::LS::GetSubscriptionResponse::Clear();
  clear_has_getsubscriptionresponse();
}
inline const ::LS::GetSubscriptionResponse& Message::getsubscriptionresponse() const {
  return getsubscriptionresponse_ != NULL ? *getsubscriptionresponse_ : *default_instance_->getsubscriptionresponse_;
}
inline ::LS::GetSubscriptionResponse* Message::mutable_getsubscriptionresponse() {
  set_has_getsubscriptionresponse();
  if (getsubscriptionresponse_ == NULL) getsubscriptionresponse_ = new ::LS::GetSubscriptionResponse;
  return getsubscriptionresponse_;
}
inline ::LS::GetSubscriptionResponse* Message::release_getsubscriptionresponse() {
  clear_has_getsubscriptionresponse();
  ::LS::GetSubscriptionResponse* temp = getsubscriptionresponse_;
  getsubscriptionresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_getsubscriptionresponse(::LS::GetSubscriptionResponse* getsubscriptionresponse) {
  delete getsubscriptionresponse_;
  getsubscriptionresponse_ = getsubscriptionresponse;
  if (getsubscriptionresponse) {
    set_has_getsubscriptionresponse();
  } else {
    clear_has_getsubscriptionresponse();
  }
}

// optional .LS.GetUnwatchedSeriesResponse getUnwatchedSeriesResponse = 2004;
inline bool Message::has_getunwatchedseriesresponse() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Message::set_has_getunwatchedseriesresponse() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Message::clear_has_getunwatchedseriesresponse() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Message::clear_getunwatchedseriesresponse() {
  if (getunwatchedseriesresponse_ != NULL) getunwatchedseriesresponse_->::LS::GetUnwatchedSeriesResponse::Clear();
  clear_has_getunwatchedseriesresponse();
}
inline const ::LS::GetUnwatchedSeriesResponse& Message::getunwatchedseriesresponse() const {
  return getunwatchedseriesresponse_ != NULL ? *getunwatchedseriesresponse_ : *default_instance_->getunwatchedseriesresponse_;
}
inline ::LS::GetUnwatchedSeriesResponse* Message::mutable_getunwatchedseriesresponse() {
  set_has_getunwatchedseriesresponse();
  if (getunwatchedseriesresponse_ == NULL) getunwatchedseriesresponse_ = new ::LS::GetUnwatchedSeriesResponse;
  return getunwatchedseriesresponse_;
}
inline ::LS::GetUnwatchedSeriesResponse* Message::release_getunwatchedseriesresponse() {
  clear_has_getunwatchedseriesresponse();
  ::LS::GetUnwatchedSeriesResponse* temp = getunwatchedseriesresponse_;
  getunwatchedseriesresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_getunwatchedseriesresponse(::LS::GetUnwatchedSeriesResponse* getunwatchedseriesresponse) {
  delete getunwatchedseriesresponse_;
  getunwatchedseriesresponse_ = getunwatchedseriesresponse;
  if (getunwatchedseriesresponse) {
    set_has_getunwatchedseriesresponse();
  } else {
    clear_has_getunwatchedseriesresponse();
  }
}

// optional .LS.SetUnwatchedSeriesResponse setUnwatchedSeriesResponse = 2005;
inline bool Message::has_setunwatchedseriesresponse() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Message::set_has_setunwatchedseriesresponse() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Message::clear_has_setunwatchedseriesresponse() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Message::clear_setunwatchedseriesresponse() {
  if (setunwatchedseriesresponse_ != NULL) setunwatchedseriesresponse_->::LS::SetUnwatchedSeriesResponse::Clear();
  clear_has_setunwatchedseriesresponse();
}
inline const ::LS::SetUnwatchedSeriesResponse& Message::setunwatchedseriesresponse() const {
  return setunwatchedseriesresponse_ != NULL ? *setunwatchedseriesresponse_ : *default_instance_->setunwatchedseriesresponse_;
}
inline ::LS::SetUnwatchedSeriesResponse* Message::mutable_setunwatchedseriesresponse() {
  set_has_setunwatchedseriesresponse();
  if (setunwatchedseriesresponse_ == NULL) setunwatchedseriesresponse_ = new ::LS::SetUnwatchedSeriesResponse;
  return setunwatchedseriesresponse_;
}
inline ::LS::SetUnwatchedSeriesResponse* Message::release_setunwatchedseriesresponse() {
  clear_has_setunwatchedseriesresponse();
  ::LS::SetUnwatchedSeriesResponse* temp = setunwatchedseriesresponse_;
  setunwatchedseriesresponse_ = NULL;
  return temp;
}
inline void Message::set_allocated_setunwatchedseriesresponse(::LS::SetUnwatchedSeriesResponse* setunwatchedseriesresponse) {
  delete setunwatchedseriesresponse_;
  setunwatchedseriesresponse_ = setunwatchedseriesresponse;
  if (setunwatchedseriesresponse) {
    set_has_setunwatchedseriesresponse();
  } else {
    clear_has_setunwatchedseriesresponse();
  }
}

// -------------------------------------------------------------------

// SubscriptionRecord

// required string id = 1;
inline bool SubscriptionRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriptionRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriptionRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriptionRecord::clear_id() {
  if (id_ != &::google_public::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SubscriptionRecord::id() const {
  return *id_;
}
inline void SubscriptionRecord::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionRecord::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SubscriptionRecord::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubscriptionRecord::mutable_id() {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SubscriptionRecord::release_id() {
  clear_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SubscriptionRecord::set_allocated_id(::std::string* id) {
  if (id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SeriesRequest

// -------------------------------------------------------------------

// SeriesResponse_Episode

// required string name = 1;
inline bool SeriesResponse_Episode::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeriesResponse_Episode::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeriesResponse_Episode::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeriesResponse_Episode::clear_name() {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SeriesResponse_Episode::name() const {
  return *name_;
}
inline void SeriesResponse_Episode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SeriesResponse_Episode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SeriesResponse_Episode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_Episode::mutable_name() {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SeriesResponse_Episode::release_name() {
  clear_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_Episode::set_allocated_name(::std::string* name) {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string originalName = 2;
inline bool SeriesResponse_Episode::has_originalname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeriesResponse_Episode::set_has_originalname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeriesResponse_Episode::clear_has_originalname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeriesResponse_Episode::clear_originalname() {
  if (originalname_ != &::google_public::protobuf::internal::kEmptyString) {
    originalname_->clear();
  }
  clear_has_originalname();
}
inline const ::std::string& SeriesResponse_Episode::originalname() const {
  return *originalname_;
}
inline void SeriesResponse_Episode::set_originalname(const ::std::string& value) {
  set_has_originalname();
  if (originalname_ == &::google_public::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  originalname_->assign(value);
}
inline void SeriesResponse_Episode::set_originalname(const char* value) {
  set_has_originalname();
  if (originalname_ == &::google_public::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  originalname_->assign(value);
}
inline void SeriesResponse_Episode::set_originalname(const char* value, size_t size) {
  set_has_originalname();
  if (originalname_ == &::google_public::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  originalname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_Episode::mutable_originalname() {
  set_has_originalname();
  if (originalname_ == &::google_public::protobuf::internal::kEmptyString) {
    originalname_ = new ::std::string;
  }
  return originalname_;
}
inline ::std::string* SeriesResponse_Episode::release_originalname() {
  clear_has_originalname();
  if (originalname_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originalname_;
    originalname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_Episode::set_allocated_originalname(::std::string* originalname) {
  if (originalname_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originalname_;
  }
  if (originalname) {
    set_has_originalname();
    originalname_ = originalname;
  } else {
    clear_has_originalname();
    originalname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int32 number = 3;
inline bool SeriesResponse_Episode::has_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeriesResponse_Episode::set_has_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeriesResponse_Episode::clear_has_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeriesResponse_Episode::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google_public::protobuf::int32 SeriesResponse_Episode::number() const {
  return number_;
}
inline void SeriesResponse_Episode::set_number(::google_public::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// required string dateTranslate = 4;
inline bool SeriesResponse_Episode::has_datetranslate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeriesResponse_Episode::set_has_datetranslate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeriesResponse_Episode::clear_has_datetranslate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeriesResponse_Episode::clear_datetranslate() {
  if (datetranslate_ != &::google_public::protobuf::internal::kEmptyString) {
    datetranslate_->clear();
  }
  clear_has_datetranslate();
}
inline const ::std::string& SeriesResponse_Episode::datetranslate() const {
  return *datetranslate_;
}
inline void SeriesResponse_Episode::set_datetranslate(const ::std::string& value) {
  set_has_datetranslate();
  if (datetranslate_ == &::google_public::protobuf::internal::kEmptyString) {
    datetranslate_ = new ::std::string;
  }
  datetranslate_->assign(value);
}
inline void SeriesResponse_Episode::set_datetranslate(const char* value) {
  set_has_datetranslate();
  if (datetranslate_ == &::google_public::protobuf::internal::kEmptyString) {
    datetranslate_ = new ::std::string;
  }
  datetranslate_->assign(value);
}
inline void SeriesResponse_Episode::set_datetranslate(const char* value, size_t size) {
  set_has_datetranslate();
  if (datetranslate_ == &::google_public::protobuf::internal::kEmptyString) {
    datetranslate_ = new ::std::string;
  }
  datetranslate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_Episode::mutable_datetranslate() {
  set_has_datetranslate();
  if (datetranslate_ == &::google_public::protobuf::internal::kEmptyString) {
    datetranslate_ = new ::std::string;
  }
  return datetranslate_;
}
inline ::std::string* SeriesResponse_Episode::release_datetranslate() {
  clear_has_datetranslate();
  if (datetranslate_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datetranslate_;
    datetranslate_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_Episode::set_allocated_datetranslate(::std::string* datetranslate) {
  if (datetranslate_ != &::google_public::protobuf::internal::kEmptyString) {
    delete datetranslate_;
  }
  if (datetranslate) {
    set_has_datetranslate();
    datetranslate_ = datetranslate;
  } else {
    clear_has_datetranslate();
    datetranslate_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SeriesResponse_TVShow

// required string title = 1;
inline bool SeriesResponse_TVShow::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeriesResponse_TVShow::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeriesResponse_TVShow::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeriesResponse_TVShow::clear_title() {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SeriesResponse_TVShow::title() const {
  return *title_;
}
inline void SeriesResponse_TVShow::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SeriesResponse_TVShow::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SeriesResponse_TVShow::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_title() {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SeriesResponse_TVShow::release_title() {
  clear_has_title();
  if (title_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_title(::std::string* title) {
  if (title_ != &::google_public::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string originalTitle = 2;
inline bool SeriesResponse_TVShow::has_originaltitle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeriesResponse_TVShow::set_has_originaltitle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeriesResponse_TVShow::clear_has_originaltitle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeriesResponse_TVShow::clear_originaltitle() {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_->clear();
  }
  clear_has_originaltitle();
}
inline const ::std::string& SeriesResponse_TVShow::originaltitle() const {
  return *originaltitle_;
}
inline void SeriesResponse_TVShow::set_originaltitle(const ::std::string& value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void SeriesResponse_TVShow::set_originaltitle(const char* value) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(value);
}
inline void SeriesResponse_TVShow::set_originaltitle(const char* value, size_t size) {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  originaltitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_originaltitle() {
  set_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    originaltitle_ = new ::std::string;
  }
  return originaltitle_;
}
inline ::std::string* SeriesResponse_TVShow::release_originaltitle() {
  clear_has_originaltitle();
  if (originaltitle_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originaltitle_;
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_originaltitle(::std::string* originaltitle) {
  if (originaltitle_ != &::google_public::protobuf::internal::kEmptyString) {
    delete originaltitle_;
  }
  if (originaltitle) {
    set_has_originaltitle();
    originaltitle_ = originaltitle;
  } else {
    clear_has_originaltitle();
    originaltitle_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int32 seasonNumber = 3;
inline bool SeriesResponse_TVShow::has_seasonnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeriesResponse_TVShow::set_has_seasonnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeriesResponse_TVShow::clear_has_seasonnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeriesResponse_TVShow::clear_seasonnumber() {
  seasonnumber_ = 0;
  clear_has_seasonnumber();
}
inline ::google_public::protobuf::int32 SeriesResponse_TVShow::seasonnumber() const {
  return seasonnumber_;
}
inline void SeriesResponse_TVShow::set_seasonnumber(::google_public::protobuf::int32 value) {
  set_has_seasonnumber();
  seasonnumber_ = value;
}

// required int32 episodeNumber = 4;
inline bool SeriesResponse_TVShow::has_episodenumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeriesResponse_TVShow::set_has_episodenumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeriesResponse_TVShow::clear_has_episodenumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeriesResponse_TVShow::clear_episodenumber() {
  episodenumber_ = 0;
  clear_has_episodenumber();
}
inline ::google_public::protobuf::int32 SeriesResponse_TVShow::episodenumber() const {
  return episodenumber_;
}
inline void SeriesResponse_TVShow::set_episodenumber(::google_public::protobuf::int32 value) {
  set_has_episodenumber();
  episodenumber_ = value;
}

// required string id = 99;
inline bool SeriesResponse_TVShow::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SeriesResponse_TVShow::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SeriesResponse_TVShow::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SeriesResponse_TVShow::clear_id() {
  if (id_ != &::google_public::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SeriesResponse_TVShow::id() const {
  return *id_;
}
inline void SeriesResponse_TVShow::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SeriesResponse_TVShow::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SeriesResponse_TVShow::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_id() {
  set_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SeriesResponse_TVShow::release_id() {
  clear_has_id();
  if (id_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_id(::std::string* id) {
  if (id_ != &::google_public::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string snapshot = 100;
inline bool SeriesResponse_TVShow::has_snapshot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SeriesResponse_TVShow::set_has_snapshot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SeriesResponse_TVShow::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SeriesResponse_TVShow::clear_snapshot() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    snapshot_->clear();
  }
  clear_has_snapshot();
}
inline const ::std::string& SeriesResponse_TVShow::snapshot() const {
  return *snapshot_;
}
inline void SeriesResponse_TVShow::set_snapshot(const ::std::string& value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void SeriesResponse_TVShow::set_snapshot(const char* value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void SeriesResponse_TVShow::set_snapshot(const char* value, size_t size) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeriesResponse_TVShow::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  return snapshot_;
}
inline ::std::string* SeriesResponse_TVShow::release_snapshot() {
  clear_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_;
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeriesResponse_TVShow::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (snapshot) {
    set_has_snapshot();
    snapshot_ = snapshot;
  } else {
    clear_has_snapshot();
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// repeated .LS.SeriesResponse.Episode episodes = 101;
inline int SeriesResponse_TVShow::episodes_size() const {
  return episodes_.size();
}
inline void SeriesResponse_TVShow::clear_episodes() {
  episodes_.Clear();
}
inline const ::LS::SeriesResponse_Episode& SeriesResponse_TVShow::episodes(int index) const {
  return episodes_.Get(index);
}
inline ::LS::SeriesResponse_Episode* SeriesResponse_TVShow::mutable_episodes(int index) {
  return episodes_.Mutable(index);
}
inline ::LS::SeriesResponse_Episode* SeriesResponse_TVShow::add_episodes() {
  return episodes_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_Episode >&
SeriesResponse_TVShow::episodes() const {
  return episodes_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_Episode >*
SeriesResponse_TVShow::mutable_episodes() {
  return &episodes_;
}

// -------------------------------------------------------------------

// SeriesResponse

// repeated .LS.SeriesResponse.TVShow shows = 1;
inline int SeriesResponse::shows_size() const {
  return shows_.size();
}
inline void SeriesResponse::clear_shows() {
  shows_.Clear();
}
inline const ::LS::SeriesResponse_TVShow& SeriesResponse::shows(int index) const {
  return shows_.Get(index);
}
inline ::LS::SeriesResponse_TVShow* SeriesResponse::mutable_shows(int index) {
  return shows_.Mutable(index);
}
inline ::LS::SeriesResponse_TVShow* SeriesResponse::add_shows() {
  return shows_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >&
SeriesResponse::shows() const {
  return shows_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::SeriesResponse_TVShow >*
SeriesResponse::mutable_shows() {
  return &shows_;
}

// -------------------------------------------------------------------

// ArtworkRequest

// required string idShow = 1;
inline bool ArtworkRequest::has_idshow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArtworkRequest::set_has_idshow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArtworkRequest::clear_has_idshow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArtworkRequest::clear_idshow() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    idshow_->clear();
  }
  clear_has_idshow();
}
inline const ::std::string& ArtworkRequest::idshow() const {
  return *idshow_;
}
inline void ArtworkRequest::set_idshow(const ::std::string& value) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(value);
}
inline void ArtworkRequest::set_idshow(const char* value) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(value);
}
inline void ArtworkRequest::set_idshow(const char* value, size_t size) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkRequest::mutable_idshow() {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  return idshow_;
}
inline ::std::string* ArtworkRequest::release_idshow() {
  clear_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idshow_;
    idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkRequest::set_allocated_idshow(::std::string* idshow) {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (idshow) {
    set_has_idshow();
    idshow_ = idshow;
  } else {
    clear_has_idshow();
    idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int32 seasonNumber = 2;
inline bool ArtworkRequest::has_seasonnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArtworkRequest::set_has_seasonnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArtworkRequest::clear_has_seasonnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArtworkRequest::clear_seasonnumber() {
  seasonnumber_ = 0;
  clear_has_seasonnumber();
}
inline ::google_public::protobuf::int32 ArtworkRequest::seasonnumber() const {
  return seasonnumber_;
}
inline void ArtworkRequest::set_seasonnumber(::google_public::protobuf::int32 value) {
  set_has_seasonnumber();
  seasonnumber_ = value;
}

// required bool thumbnail = 3;
inline bool ArtworkRequest::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArtworkRequest::set_has_thumbnail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArtworkRequest::clear_has_thumbnail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArtworkRequest::clear_thumbnail() {
  thumbnail_ = false;
  clear_has_thumbnail();
}
inline bool ArtworkRequest::thumbnail() const {
  return thumbnail_;
}
inline void ArtworkRequest::set_thumbnail(bool value) {
  set_has_thumbnail();
  thumbnail_ = value;
}

// required string snapshot = 100;
inline bool ArtworkRequest::has_snapshot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArtworkRequest::set_has_snapshot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArtworkRequest::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArtworkRequest::clear_snapshot() {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    snapshot_->clear();
  }
  clear_has_snapshot();
}
inline const ::std::string& ArtworkRequest::snapshot() const {
  return *snapshot_;
}
inline void ArtworkRequest::set_snapshot(const ::std::string& value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void ArtworkRequest::set_snapshot(const char* value) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(value);
}
inline void ArtworkRequest::set_snapshot(const char* value, size_t size) {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  snapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArtworkRequest::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    snapshot_ = new ::std::string;
  }
  return snapshot_;
}
inline ::std::string* ArtworkRequest::release_snapshot() {
  clear_has_snapshot();
  if (snapshot_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_;
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArtworkRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete snapshot_;
  }
  if (snapshot) {
    set_has_snapshot();
    snapshot_ = snapshot;
  } else {
    clear_has_snapshot();
    snapshot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ArtworkResponse

// -------------------------------------------------------------------

// SetSubscriptionRequest

// required string idClient = 1;
inline bool SetSubscriptionRequest::has_idclient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSubscriptionRequest::set_has_idclient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSubscriptionRequest::clear_has_idclient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSubscriptionRequest::clear_idclient() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    idclient_->clear();
  }
  clear_has_idclient();
}
inline const ::std::string& SetSubscriptionRequest::idclient() const {
  return *idclient_;
}
inline void SetSubscriptionRequest::set_idclient(const ::std::string& value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void SetSubscriptionRequest::set_idclient(const char* value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void SetSubscriptionRequest::set_idclient(const char* value, size_t size) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSubscriptionRequest::mutable_idclient() {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  return idclient_;
}
inline ::std::string* SetSubscriptionRequest::release_idclient() {
  clear_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idclient_;
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetSubscriptionRequest::set_allocated_idclient(::std::string* idclient) {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (idclient) {
    set_has_idclient();
    idclient_ = idclient;
  } else {
    clear_has_idclient();
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required string token = 2;
inline bool SetSubscriptionRequest::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetSubscriptionRequest::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetSubscriptionRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetSubscriptionRequest::clear_token() {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& SetSubscriptionRequest::token() const {
  return *token_;
}
inline void SetSubscriptionRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void SetSubscriptionRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void SetSubscriptionRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetSubscriptionRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* SetSubscriptionRequest::release_token() {
  clear_has_token();
  if (token_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetSubscriptionRequest::set_allocated_token(::std::string* token) {
  if (token_ != &::google_public::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// repeated .LS.SubscriptionRecord subscriptions = 3;
inline int SetSubscriptionRequest::subscriptions_size() const {
  return subscriptions_.size();
}
inline void SetSubscriptionRequest::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::LS::SubscriptionRecord& SetSubscriptionRequest::subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline ::LS::SubscriptionRecord* SetSubscriptionRequest::mutable_subscriptions(int index) {
  return subscriptions_.Mutable(index);
}
inline ::LS::SubscriptionRecord* SetSubscriptionRequest::add_subscriptions() {
  return subscriptions_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >&
SetSubscriptionRequest::subscriptions() const {
  return subscriptions_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >*
SetSubscriptionRequest::mutable_subscriptions() {
  return &subscriptions_;
}

// required bool flagUnsubscribe = 4;
inline bool SetSubscriptionRequest::has_flagunsubscribe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetSubscriptionRequest::set_has_flagunsubscribe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetSubscriptionRequest::clear_has_flagunsubscribe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetSubscriptionRequest::clear_flagunsubscribe() {
  flagunsubscribe_ = false;
  clear_has_flagunsubscribe();
}
inline bool SetSubscriptionRequest::flagunsubscribe() const {
  return flagunsubscribe_;
}
inline void SetSubscriptionRequest::set_flagunsubscribe(bool value) {
  set_has_flagunsubscribe();
  flagunsubscribe_ = value;
}

// -------------------------------------------------------------------

// SetSubscriptionResponse

// required bool result = 1;
inline bool SetSubscriptionResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSubscriptionResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSubscriptionResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSubscriptionResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SetSubscriptionResponse::result() const {
  return result_;
}
inline void SetSubscriptionResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// required string idClient = 1;
inline bool GetSubscriptionRequest::has_idclient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSubscriptionRequest::set_has_idclient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSubscriptionRequest::clear_has_idclient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSubscriptionRequest::clear_idclient() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    idclient_->clear();
  }
  clear_has_idclient();
}
inline const ::std::string& GetSubscriptionRequest::idclient() const {
  return *idclient_;
}
inline void GetSubscriptionRequest::set_idclient(const ::std::string& value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void GetSubscriptionRequest::set_idclient(const char* value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void GetSubscriptionRequest::set_idclient(const char* value, size_t size) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSubscriptionRequest::mutable_idclient() {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  return idclient_;
}
inline ::std::string* GetSubscriptionRequest::release_idclient() {
  clear_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idclient_;
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetSubscriptionRequest::set_allocated_idclient(::std::string* idclient) {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (idclient) {
    set_has_idclient();
    idclient_ = idclient;
  } else {
    clear_has_idclient();
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetSubscriptionResponse

// repeated .LS.SubscriptionRecord subscriptions = 1;
inline int GetSubscriptionResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void GetSubscriptionResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::LS::SubscriptionRecord& GetSubscriptionResponse::subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline ::LS::SubscriptionRecord* GetSubscriptionResponse::mutable_subscriptions(int index) {
  return subscriptions_.Mutable(index);
}
inline ::LS::SubscriptionRecord* GetSubscriptionResponse::add_subscriptions() {
  return subscriptions_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >&
GetSubscriptionResponse::subscriptions() const {
  return subscriptions_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::SubscriptionRecord >*
GetSubscriptionResponse::mutable_subscriptions() {
  return &subscriptions_;
}

// -------------------------------------------------------------------

// GetUnwatchedSeriesRequest

// required string idClient = 1;
inline bool GetUnwatchedSeriesRequest::has_idclient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUnwatchedSeriesRequest::set_has_idclient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUnwatchedSeriesRequest::clear_has_idclient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUnwatchedSeriesRequest::clear_idclient() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    idclient_->clear();
  }
  clear_has_idclient();
}
inline const ::std::string& GetUnwatchedSeriesRequest::idclient() const {
  return *idclient_;
}
inline void GetUnwatchedSeriesRequest::set_idclient(const ::std::string& value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void GetUnwatchedSeriesRequest::set_idclient(const char* value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void GetUnwatchedSeriesRequest::set_idclient(const char* value, size_t size) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetUnwatchedSeriesRequest::mutable_idclient() {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  return idclient_;
}
inline ::std::string* GetUnwatchedSeriesRequest::release_idclient() {
  clear_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idclient_;
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetUnwatchedSeriesRequest::set_allocated_idclient(::std::string* idclient) {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (idclient) {
    set_has_idclient();
    idclient_ = idclient;
  } else {
    clear_has_idclient();
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetUnwatchedSeriesResponse_Episode

// required string idShow = 1;
inline bool GetUnwatchedSeriesResponse_Episode::has_idshow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetUnwatchedSeriesResponse_Episode::set_has_idshow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetUnwatchedSeriesResponse_Episode::clear_has_idshow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetUnwatchedSeriesResponse_Episode::clear_idshow() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    idshow_->clear();
  }
  clear_has_idshow();
}
inline const ::std::string& GetUnwatchedSeriesResponse_Episode::idshow() const {
  return *idshow_;
}
inline void GetUnwatchedSeriesResponse_Episode::set_idshow(const ::std::string& value) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(value);
}
inline void GetUnwatchedSeriesResponse_Episode::set_idshow(const char* value) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(value);
}
inline void GetUnwatchedSeriesResponse_Episode::set_idshow(const char* value, size_t size) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetUnwatchedSeriesResponse_Episode::mutable_idshow() {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  return idshow_;
}
inline ::std::string* GetUnwatchedSeriesResponse_Episode::release_idshow() {
  clear_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idshow_;
    idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetUnwatchedSeriesResponse_Episode::set_allocated_idshow(::std::string* idshow) {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (idshow) {
    set_has_idshow();
    idshow_ = idshow;
  } else {
    clear_has_idshow();
    idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int32 numberSeason = 2;
inline bool GetUnwatchedSeriesResponse_Episode::has_numberseason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetUnwatchedSeriesResponse_Episode::set_has_numberseason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetUnwatchedSeriesResponse_Episode::clear_has_numberseason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetUnwatchedSeriesResponse_Episode::clear_numberseason() {
  numberseason_ = 0;
  clear_has_numberseason();
}
inline ::google_public::protobuf::int32 GetUnwatchedSeriesResponse_Episode::numberseason() const {
  return numberseason_;
}
inline void GetUnwatchedSeriesResponse_Episode::set_numberseason(::google_public::protobuf::int32 value) {
  set_has_numberseason();
  numberseason_ = value;
}

// required int32 numberEpisode = 3;
inline bool GetUnwatchedSeriesResponse_Episode::has_numberepisode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetUnwatchedSeriesResponse_Episode::set_has_numberepisode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetUnwatchedSeriesResponse_Episode::clear_has_numberepisode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetUnwatchedSeriesResponse_Episode::clear_numberepisode() {
  numberepisode_ = 0;
  clear_has_numberepisode();
}
inline ::google_public::protobuf::int32 GetUnwatchedSeriesResponse_Episode::numberepisode() const {
  return numberepisode_;
}
inline void GetUnwatchedSeriesResponse_Episode::set_numberepisode(::google_public::protobuf::int32 value) {
  set_has_numberepisode();
  numberepisode_ = value;
}

// -------------------------------------------------------------------

// GetUnwatchedSeriesResponse

// repeated .LS.GetUnwatchedSeriesResponse.Episode episodes = 1;
inline int GetUnwatchedSeriesResponse::episodes_size() const {
  return episodes_.size();
}
inline void GetUnwatchedSeriesResponse::clear_episodes() {
  episodes_.Clear();
}
inline const ::LS::GetUnwatchedSeriesResponse_Episode& GetUnwatchedSeriesResponse::episodes(int index) const {
  return episodes_.Get(index);
}
inline ::LS::GetUnwatchedSeriesResponse_Episode* GetUnwatchedSeriesResponse::mutable_episodes(int index) {
  return episodes_.Mutable(index);
}
inline ::LS::GetUnwatchedSeriesResponse_Episode* GetUnwatchedSeriesResponse::add_episodes() {
  return episodes_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::GetUnwatchedSeriesResponse_Episode >&
GetUnwatchedSeriesResponse::episodes() const {
  return episodes_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::GetUnwatchedSeriesResponse_Episode >*
GetUnwatchedSeriesResponse::mutable_episodes() {
  return &episodes_;
}

// -------------------------------------------------------------------

// SetUnwatchedSeriesRequest_Episode

// required string idShow = 1;
inline bool SetUnwatchedSeriesRequest_Episode::has_idshow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetUnwatchedSeriesRequest_Episode::set_has_idshow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetUnwatchedSeriesRequest_Episode::clear_has_idshow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetUnwatchedSeriesRequest_Episode::clear_idshow() {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    idshow_->clear();
  }
  clear_has_idshow();
}
inline const ::std::string& SetUnwatchedSeriesRequest_Episode::idshow() const {
  return *idshow_;
}
inline void SetUnwatchedSeriesRequest_Episode::set_idshow(const ::std::string& value) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(value);
}
inline void SetUnwatchedSeriesRequest_Episode::set_idshow(const char* value) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(value);
}
inline void SetUnwatchedSeriesRequest_Episode::set_idshow(const char* value, size_t size) {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  idshow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetUnwatchedSeriesRequest_Episode::mutable_idshow() {
  set_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    idshow_ = new ::std::string;
  }
  return idshow_;
}
inline ::std::string* SetUnwatchedSeriesRequest_Episode::release_idshow() {
  clear_has_idshow();
  if (idshow_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idshow_;
    idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetUnwatchedSeriesRequest_Episode::set_allocated_idshow(::std::string* idshow) {
  if (idshow_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idshow_;
  }
  if (idshow) {
    set_has_idshow();
    idshow_ = idshow;
  } else {
    clear_has_idshow();
    idshow_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// required int32 numberSeason = 2;
inline bool SetUnwatchedSeriesRequest_Episode::has_numberseason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetUnwatchedSeriesRequest_Episode::set_has_numberseason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetUnwatchedSeriesRequest_Episode::clear_has_numberseason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetUnwatchedSeriesRequest_Episode::clear_numberseason() {
  numberseason_ = 0;
  clear_has_numberseason();
}
inline ::google_public::protobuf::int32 SetUnwatchedSeriesRequest_Episode::numberseason() const {
  return numberseason_;
}
inline void SetUnwatchedSeriesRequest_Episode::set_numberseason(::google_public::protobuf::int32 value) {
  set_has_numberseason();
  numberseason_ = value;
}

// required int32 numberEpisode = 3;
inline bool SetUnwatchedSeriesRequest_Episode::has_numberepisode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetUnwatchedSeriesRequest_Episode::set_has_numberepisode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetUnwatchedSeriesRequest_Episode::clear_has_numberepisode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetUnwatchedSeriesRequest_Episode::clear_numberepisode() {
  numberepisode_ = 0;
  clear_has_numberepisode();
}
inline ::google_public::protobuf::int32 SetUnwatchedSeriesRequest_Episode::numberepisode() const {
  return numberepisode_;
}
inline void SetUnwatchedSeriesRequest_Episode::set_numberepisode(::google_public::protobuf::int32 value) {
  set_has_numberepisode();
  numberepisode_ = value;
}

// -------------------------------------------------------------------

// SetUnwatchedSeriesRequest

// required string idClient = 1;
inline bool SetUnwatchedSeriesRequest::has_idclient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetUnwatchedSeriesRequest::set_has_idclient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetUnwatchedSeriesRequest::clear_has_idclient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetUnwatchedSeriesRequest::clear_idclient() {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    idclient_->clear();
  }
  clear_has_idclient();
}
inline const ::std::string& SetUnwatchedSeriesRequest::idclient() const {
  return *idclient_;
}
inline void SetUnwatchedSeriesRequest::set_idclient(const ::std::string& value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void SetUnwatchedSeriesRequest::set_idclient(const char* value) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(value);
}
inline void SetUnwatchedSeriesRequest::set_idclient(const char* value, size_t size) {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  idclient_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetUnwatchedSeriesRequest::mutable_idclient() {
  set_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    idclient_ = new ::std::string;
  }
  return idclient_;
}
inline ::std::string* SetUnwatchedSeriesRequest::release_idclient() {
  clear_has_idclient();
  if (idclient_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = idclient_;
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetUnwatchedSeriesRequest::set_allocated_idclient(::std::string* idclient) {
  if (idclient_ != &::google_public::protobuf::internal::kEmptyString) {
    delete idclient_;
  }
  if (idclient) {
    set_has_idclient();
    idclient_ = idclient;
  } else {
    clear_has_idclient();
    idclient_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// repeated .LS.SetUnwatchedSeriesRequest.Episode episodes = 2;
inline int SetUnwatchedSeriesRequest::episodes_size() const {
  return episodes_.size();
}
inline void SetUnwatchedSeriesRequest::clear_episodes() {
  episodes_.Clear();
}
inline const ::LS::SetUnwatchedSeriesRequest_Episode& SetUnwatchedSeriesRequest::episodes(int index) const {
  return episodes_.Get(index);
}
inline ::LS::SetUnwatchedSeriesRequest_Episode* SetUnwatchedSeriesRequest::mutable_episodes(int index) {
  return episodes_.Mutable(index);
}
inline ::LS::SetUnwatchedSeriesRequest_Episode* SetUnwatchedSeriesRequest::add_episodes() {
  return episodes_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::LS::SetUnwatchedSeriesRequest_Episode >&
SetUnwatchedSeriesRequest::episodes() const {
  return episodes_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::LS::SetUnwatchedSeriesRequest_Episode >*
SetUnwatchedSeriesRequest::mutable_episodes() {
  return &episodes_;
}

// required bool flagRemove = 3;
inline bool SetUnwatchedSeriesRequest::has_flagremove() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetUnwatchedSeriesRequest::set_has_flagremove() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetUnwatchedSeriesRequest::clear_has_flagremove() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetUnwatchedSeriesRequest::clear_flagremove() {
  flagremove_ = false;
  clear_has_flagremove();
}
inline bool SetUnwatchedSeriesRequest::flagremove() const {
  return flagremove_;
}
inline void SetUnwatchedSeriesRequest::set_flagremove(bool value) {
  set_has_flagremove();
  flagremove_ = value;
}

// -------------------------------------------------------------------

// SetUnwatchedSeriesResponse

// required bool result = 1;
inline bool SetUnwatchedSeriesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetUnwatchedSeriesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetUnwatchedSeriesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetUnwatchedSeriesResponse::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SetUnwatchedSeriesResponse::result() const {
  return result_;
}
inline void SetUnwatchedSeriesResponse::set_result(bool value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LS

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LostSeriesProtocol_2eproto__INCLUDED
